
Token: Code=293  Line= 8   Col= 8    Name= PROGRAM      Spelling= 'program'
Token: Code=300  Line= 8   Col= 15   Name= ID           Spelling= 'p12_14'
Token: Code=265  Line= 8   Col= 16   Name= SEMICOLON    Spelling= ';'
#05 program_parameters -> EMPTY
#02 program_head -> program ID(p12_14) program_parameters SEMICOLON
L00001

L00002

L00003

#10 variable_declarations -> EMPTY
Token: Code=297  Line= 9   Col= 6    Name= VAR          Spelling= 'var'
Token: Code=300  Line= 9   Col= 8    Name= ID           Spelling= 'b'
#08 identifier_list -> ID(b) identifier_list={b}
Token: Code=266  Line= 9   Col= 9    Name= COLON        Spelling= ':'
Token: Code=300  Line= 9   Col= 16   Name= ID           Spelling= 'boolean'
#14 standard_type -> ID(boolean)
Symbol(Type Symbol) id(boolean)
  type(Boolean)
    size(1) alignment(1)
#12 type -> standard_type
Token: Code=265  Line= 9   Col= 17   Name= SEMICOLON    Spelling= ';'
#11 variable_declarations -> variable_declarations VAR identifier_list  {b} : type SEMICOLON
Token: Code=297  Line= 10  Col= 6    Name= VAR          Spelling= 'var'
Token: Code=300  Line= 10  Col= 8    Name= ID           Spelling= 'i'
#08 identifier_list -> ID(i) identifier_list={i}
Token: Code=266  Line= 10  Col= 9    Name= COLON        Spelling= ':'
Token: Code=300  Line= 10  Col= 16   Name= ID           Spelling= 'integer'
#14 standard_type -> ID(integer)
Symbol(Type Symbol) id(integer)
  type(Integer)
    size(1) alignment(1)
#12 type -> standard_type
Token: Code=265  Line= 10  Col= 17   Name= SEMICOLON    Spelling= ';'
#11 variable_declarations -> variable_declarations VAR identifier_list  {i} : type SEMICOLON
Token: Code=281  Line= 11  Col= 6    Name= BEGIN        Spelling= 'begin'
#15 subprogram_declarations -> EMPTY
#03 program_declarations -> declarations subprogram_declarations
Token: Code=300  Line= 12  Col= 4    Name= ID           Spelling= 'b'
Token: Code=262  Line= 12  Col= 6    Name= ASSIGN       Spelling= ':='
#34 variable -> ID(b)
Symbol(Variable Symbol) id(b)
  type(Boolean)
    size(1) alignment(1)
  lexicallevel(1) address(5)
          lda       0         5         
Token: Code=300  Line= 12  Col= 11   Name= ID           Spelling= 'false'
Token: Code=265  Line= 12  Col= 12   Name= SEMICOLON    Spelling= ';'
#63 factor -> ID(false)
Symbol(Constant Symbol) id(false)
  type(Boolean)
    size(1) alignment(1)
  Constant value(0)
    type(Boolean)
      size(1) alignment(1)
          ldc       b         0         
#56 term -> factor
#48 simple_expression -> term
#40 expression -> simple_expression
#29 statement -> variable := expression
          lda       0         5         
          ldc       b         0         
          sti       b                   
#27 statement_list -> statement
          lda       0         5         
          ldc       b         0         
          sti       b                   
Token: Code=300  Line= 13  Col= 4    Name= ID           Spelling= 'i'
Token: Code=262  Line= 13  Col= 6    Name= ASSIGN       Spelling= ':='
#34 variable -> ID(i)
Symbol(Variable Symbol) id(i)
  type(Integer)
    size(1) alignment(1)
  lexicallevel(1) address(6)
          lda       0         6         
Token: Code=300  Line= 13  Col= 9    Name= ID           Spelling= 'ord'
Token: Code=273  Line= 13  Col= 10   Name= LPAREN       Spelling= '('
Token: Code=300  Line= 13  Col= 11   Name= ID           Spelling= 'b'
Token: Code=274  Line= 13  Col= 12   Name= RPAREN       Spelling= ')'
#63 factor -> ID(b)
Symbol(Variable Symbol) id(b)
  type(Boolean)
    size(1) alignment(1)
  lexicallevel(1) address(5)
          lvb       0         5         
#56 term -> factor
#48 simple_expression -> term
#40 expression -> simple_expression
#38 expression_list -> expression
#65 factor -> ID(ord) LPAREN expression_list RPAREN
#56 term -> factor
Token: Code=265  Line= 13  Col= 13   Name= SEMICOLON    Spelling= ';'
#48 simple_expression -> term
#40 expression -> simple_expression
#29 statement -> variable := expression
          lda       0         6         
          lvb       0         5         
          ord                           
          sti       i                   
#28 statement_list -> statement_list SEMICOLON statement
          lda       0         5         
          ldc       b         0         
          sti       b                   
          lda       0         6         
          lvb       0         5         
          ord                           
          sti       i                   
Token: Code=300  Line= 14  Col= 4    Name= ID           Spelling= 'b'
Token: Code=262  Line= 14  Col= 6    Name= ASSIGN       Spelling= ':='
#34 variable -> ID(b)
Symbol(Variable Symbol) id(b)
  type(Boolean)
    size(1) alignment(1)
  lexicallevel(1) address(5)
          lda       0         5         
Token: Code=300  Line= 14  Col= 10   Name= ID           Spelling= 'true'
Token: Code=265  Line= 14  Col= 11   Name= SEMICOLON    Spelling= ';'
#63 factor -> ID(true)
Symbol(Constant Symbol) id(true)
  type(Boolean)
    size(1) alignment(1)
  Constant value(1)
    type(Boolean)
      size(1) alignment(1)
          ldc       b         1         
#56 term -> factor
#48 simple_expression -> term
#40 expression -> simple_expression
#29 statement -> variable := expression
          lda       0         5         
          ldc       b         1         
          sti       b                   
#28 statement_list -> statement_list SEMICOLON statement
          lda       0         5         
          ldc       b         0         
          sti       b                   
          lda       0         6         
          lvb       0         5         
          ord                           
          sti       i                   
          lda       0         5         
          ldc       b         1         
          sti       b                   
Token: Code=300  Line= 15  Col= 4    Name= ID           Spelling= 'i'
Token: Code=262  Line= 15  Col= 6    Name= ASSIGN       Spelling= ':='
#34 variable -> ID(i)
Symbol(Variable Symbol) id(i)
  type(Integer)
    size(1) alignment(1)
  lexicallevel(1) address(6)
          lda       0         6         
Token: Code=300  Line= 15  Col= 9    Name= ID           Spelling= 'ord'
Token: Code=273  Line= 15  Col= 10   Name= LPAREN       Spelling= '('
Token: Code=300  Line= 15  Col= 11   Name= ID           Spelling= 'b'
Token: Code=274  Line= 15  Col= 12   Name= RPAREN       Spelling= ')'
#63 factor -> ID(b)
Symbol(Variable Symbol) id(b)
  type(Boolean)
    size(1) alignment(1)
  lexicallevel(1) address(5)
          lvb       0         5         
#56 term -> factor
#48 simple_expression -> term
#40 expression -> simple_expression
#38 expression_list -> expression
#65 factor -> ID(ord) LPAREN expression_list RPAREN
#56 term -> factor
Token: Code=285  Line= 16  Col= 4    Name= END          Spelling= 'end'
#48 simple_expression -> term
#40 expression -> simple_expression
#29 statement -> variable := expression
          lda       0         6         
          lvb       0         5         
          ord                           
          sti       i                   
#28 statement_list -> statement_list SEMICOLON statement
          lda       0         5         
          ldc       b         0         
          sti       b                   
          lda       0         6         
          lvb       0         5         
          ord                           
          sti       i                   
          lda       0         5         
          ldc       b         1         
          sti       b                   
          lda       0         6         
          lvb       0         5         
          ord                           
          sti       i                   
#26 optional_statements -> statement_list
          lda       0         5         
          ldc       b         0         
          sti       b                   
          lda       0         6         
          lvb       0         5         
          ord                           
          sti       i                   
          lda       0         5         
          ldc       b         1         
          sti       b                   
          lda       0         6         
          lvb       0         5         
          ord                           
          sti       i                   
#24 compound_statement -> BEGIN optional_statements END
          lda       0         5         
          ldc       b         0         
          sti       b                   
          lda       0         6         
          lvb       0         5         
          ord                           
          sti       i                   
          lda       0         5         
          ldc       b         1         
          sti       b                   
          lda       0         6         
          lvb       0         5         
          ord                           
          sti       i                   
Token: Code=263  Line= 16  Col= 13   Name= PERIOD       Spelling= '.'
#04 program_body -> compound_statement PERIOD
#01 program -> program_head program_declarations program_body
          Symbol(Procedure Symbol) id(p12_14)
            type(Subprogram)
                Return Type
                  type(Void)
                    size(0) alignment(0)
                Parameter Types
            lexicallevel(0) elabel(L00001) splabel(L00002) eplabel(L00003)
prolog
L00001    ent       sp        L00002    
          ent       ep        L00003    
compound_statement
          lda       0         5         
          ldc       b         0         
          sti       b                   
          lda       0         6         
          lvb       0         5         
          ord                           
          sti       i                   
          lda       0         5         
          ldc       b         1         
          sti       b                   
          lda       0         6         
          lvb       0         5         
          ord                           
          sti       i                   
          rtn       p                   

#define   L00002    6                   


#define   L00003    8                   

epilog
          rtn       p                   
#define   L00002    6                   
#define   L00003    8                   
program epilog
          mst       0                   
          cup       0         L00001    
          stp                           
Locality: lexical level 1

  Symbol(Variable Symbol) id(b)
    type(Boolean)
      size(1) alignment(1)
    lexicallevel(1) address(5)
  Symbol(Variable Symbol) id(i)
    type(Integer)
      size(1) alignment(1)
    lexicallevel(1) address(6)

Locality: lexical level 0

Symbol(Standard Function Symbol) id(abs)
  type(Void)
    size(0) alignment(0)
  cspid(abs)
Symbol(Type Symbol) id(boolean)
  type(Boolean)
    size(1) alignment(1)
Symbol(Type Symbol) id(char)
  type(Character)
    size(1) alignment(1)
Symbol(Standard Function Symbol) id(chr)
  type(Void)
    size(0) alignment(0)
  cspid(chr)
Symbol(Standard Function Symbol) id(exp)
  type(Void)
    size(0) alignment(0)
  cspid(exp)
Symbol(Constant Symbol) id(false)
  type(Boolean)
    size(1) alignment(1)
  Constant value(0)
    type(Boolean)
      size(1) alignment(1)
Symbol(Type Symbol) id(integer)
  type(Integer)
    size(1) alignment(1)
Symbol(Standard Function Symbol) id(ln)
  type(Void)
    size(0) alignment(0)
  cspid(ln)
Symbol(Standard Function Symbol) id(ord)
  type(Void)
    size(0) alignment(0)
  cspid(ord)
Symbol(Procedure Symbol) id(p12_14)
  type(Subprogram)
      Return Type
        type(Void)
          size(0) alignment(0)
      Parameter Types
  lexicallevel(0) elabel(L00001) splabel(L00002) eplabel(L00003)
Symbol(Standard Function Symbol) id(pred)
  type(Void)
    size(0) alignment(0)
  cspid(dec)
Symbol(Standard Procedure Symbol) id(readchar)
  type(Void)
    size(0) alignment(0)
  cspid(rdc)
Symbol(Standard Procedure Symbol) id(readinteger)
  type(Void)
    size(0) alignment(0)
  cspid(rdi)
Symbol(Standard Procedure Symbol) id(readln)
  type(Void)
    size(0) alignment(0)
  cspid(rln)
Symbol(Standard Procedure Symbol) id(readreal)
  type(Void)
    size(0) alignment(0)
  cspid(rdr)
Symbol(Standard Procedure Symbol) id(readstring)
  type(Void)
    size(0) alignment(0)
  cspid(rds)
Symbol(Type Symbol) id(real)
  type(Real)
    size(1) alignment(1)
Symbol(Standard Function Symbol) id(round)
  type(Void)
    size(0) alignment(0)
  cspid(rnd)
Symbol(Standard Function Symbol) id(sqrt)
  type(Void)
    size(0) alignment(0)
  cspid(sqt)
Symbol(Standard Function Symbol) id(succ)
  type(Void)
    size(0) alignment(0)
  cspid(inc)
Symbol(Constant Symbol) id(true)
  type(Boolean)
    size(1) alignment(1)
  Constant value(1)
    type(Boolean)
      size(1) alignment(1)
Symbol(Standard Function Symbol) id(trunc)
  type(Void)
    size(0) alignment(0)
  cspid(trc)
Symbol(Standard Procedure Symbol) id(writeboolean)
  type(Void)
    size(0) alignment(0)
  cspid(wrb)
Symbol(Standard Procedure Symbol) id(writechar)
  type(Void)
    size(0) alignment(0)
  cspid(wrc)
Symbol(Standard Procedure Symbol) id(writeexponential)
  type(Void)
    size(0) alignment(0)
  cspid(wre)
Symbol(Standard Procedure Symbol) id(writefixed)
  type(Void)
    size(0) alignment(0)
  cspid(wrf)
Symbol(Standard Procedure Symbol) id(writeinteger)
  type(Void)
    size(0) alignment(0)
  cspid(wri)
Symbol(Standard Procedure Symbol) id(writeln)
  type(Void)
    size(0) alignment(0)
  cspid(wln)
Symbol(Standard Procedure Symbol) id(writestring)
  type(Void)
    size(0) alignment(0)
  cspid(wrs)

