
Token: Code=293  Line= 12  Col= 8    Name= PROGRAM      Spelling= 'program'
Token: Code=300  Line= 12  Col= 17   Name= ID           Spelling= 'p067_000'
Token: Code=265  Line= 12  Col= 18   Name= SEMICOLON    Spelling= ';'
#05 program_parameters -> EMPTY
#02 program_head -> program ID(p067_000) program_parameters SEMICOLON
#10 declarations -> EMPTY
Token: Code=297  Line= 13  Col= 6    Name= VAR          Spelling= 'var'
Token: Code=300  Line= 13  Col= 8    Name= ID           Spelling= 'a'
#08 identifier_list -> ID(a) identifier_list={a}
Token: Code=264  Line= 13  Col= 9    Name= COMMA        Spelling= ','
Token: Code=300  Line= 13  Col= 10   Name= ID           Spelling= 'b'
#09 identifier_list -> identifier_list , ID(b) identifier_list={a,b}
Token: Code=266  Line= 13  Col= 11   Name= COLON        Spelling= ':'
Token: Code=300  Line= 13  Col= 18   Name= ID           Spelling= 'boolean'
#14 standard_type -> ID(boolean)
Symbol(Type Symbol) id(boolean)
  type(Boolean)
    size(1) alignment(1)
#12 type -> standard_type
Token: Code=265  Line= 13  Col= 19   Name= SEMICOLON    Spelling= ';'
#11 declarations -> declarations VAR identifier_list  {a, b} : type SEMICOLON
Token: Code=281  Line= 14  Col= 6    Name= BEGIN        Spelling= 'begin'
#15 subprogram_declarations -> EMPTY
#03 program_declarations -> declarations subprogram_declarations
Token: Code=300  Line= 15  Col= 4    Name= ID           Spelling= 'a'
Token: Code=262  Line= 15  Col= 6    Name= ASSIGN       Spelling= ':='
#34 variable -> ID(a)
Token: Code=300  Line= 15  Col= 11   Name= ID           Spelling= 'false'
Token: Code=265  Line= 15  Col= 12   Name= SEMICOLON    Spelling= ';'
#63 factor -> ID(false)
#56 term -> factor
#48 simple_expression -> term
#40 expression -> simple_expression
#29 statement -> variable := expression
#27 statement_list -> statement
Token: Code=300  Line= 15  Col= 13   Name= ID           Spelling= 'b'
Token: Code=262  Line= 15  Col= 15   Name= ASSIGN       Spelling= ':='
#34 variable -> ID(b)
Token: Code=300  Line= 15  Col= 20   Name= ID           Spelling= 'false'
Token: Code=265  Line= 15  Col= 21   Name= SEMICOLON    Spelling= ';'
#63 factor -> ID(false)
#56 term -> factor
#48 simple_expression -> term
#40 expression -> simple_expression
#29 statement -> variable := expression
#28 statement_list -> statement_list SEMICOLON statement
Token: Code=300  Line= 16  Col= 8    Name= ID           Spelling= 'write'
Token: Code=273  Line= 16  Col= 9    Name= LPAREN       Spelling= '('
Token: Code=289  Line= 16  Col= 12   Name= NOT          Spelling= 'not'
Token: Code=273  Line= 16  Col= 13   Name= LPAREN       Spelling= '('
Token: Code=300  Line= 16  Col= 14   Name= ID           Spelling= 'a'
Token: Code=279  Line= 16  Col= 18   Name= AND          Spelling= 'and'
#63 factor -> ID(a)
#56 term -> factor
#62 mulop -> AND
Token: Code=300  Line= 16  Col= 20   Name= ID           Spelling= 'b'
Token: Code=274  Line= 16  Col= 21   Name= RPAREN       Spelling= ')'
#63 factor -> ID(b)
#57 term -> term mulop factor
#48 simple_expression -> term
#40 expression -> simple_expression
#66 mulop -> LPAREN expression RPAREN
#67 mulop -> NOT factor
#56 term -> factor
Token: Code=274  Line= 16  Col= 22   Name= RPAREN       Spelling= ')'
#48 simple_expression -> term
#40 expression -> simple_expression
#38 expression_list -> expression
#37 ID(write) ( expression_list )
#30 statement -> procedure_statement
#28 statement_list -> statement_list SEMICOLON statement
Token: Code=265  Line= 16  Col= 23   Name= SEMICOLON    Spelling= ';'
Token: Code=300  Line= 17  Col= 8    Name= ID           Spelling= 'write'
Token: Code=273  Line= 17  Col= 9    Name= LPAREN       Spelling= '('
Token: Code=303  Line= 17  Col= 14   Name= CHRLIT       Spelling= '' = ''
#70 factor -> CHRLIT(' = ')
#56 term -> factor
Token: Code=274  Line= 17  Col= 15   Name= RPAREN       Spelling= ')'
#48 simple_expression -> term
#40 expression -> simple_expression
#38 expression_list -> expression
#37 ID(write) ( expression_list )
#30 statement -> procedure_statement
#28 statement_list -> statement_list SEMICOLON statement
Token: Code=265  Line= 17  Col= 16   Name= SEMICOLON    Spelling= ';'
Token: Code=300  Line= 18  Col= 8    Name= ID           Spelling= 'write'
Token: Code=273  Line= 18  Col= 9    Name= LPAREN       Spelling= '('
Token: Code=289  Line= 18  Col= 12   Name= NOT          Spelling= 'not'
Token: Code=300  Line= 18  Col= 14   Name= ID           Spelling= 'a'
Token: Code=291  Line= 18  Col= 17   Name= OR           Spelling= 'or'
#63 factor -> ID(a)
#67 mulop -> NOT factor
#56 term -> factor
#48 simple_expression -> term
#55 procedure_statement -> or
Token: Code=289  Line= 18  Col= 21   Name= NOT          Spelling= 'not'
Token: Code=300  Line= 18  Col= 23   Name= ID           Spelling= 'b'
Token: Code=274  Line= 18  Col= 24   Name= RPAREN       Spelling= ')'
#63 factor -> ID(b)
#67 mulop -> NOT factor
#56 term -> factor
#50 simple_expression -> simple_expression addop term
#40 expression -> simple_expression
#38 expression_list -> expression
#37 ID(write) ( expression_list )
#30 statement -> procedure_statement
#28 statement_list -> statement_list SEMICOLON statement
Token: Code=265  Line= 18  Col= 25   Name= SEMICOLON    Spelling= ';'
Token: Code=300  Line= 19  Col= 10   Name= ID           Spelling= 'writeln'
Token: Code=285  Line= 20  Col= 4    Name= END          Spelling= 'end'
#36 procedure_statement -> ID(writeln)
#30 statement -> procedure_statement
#28 statement_list -> statement_list SEMICOLON statement
#26 optional_statements -> statement_list
#24 compound_statement -> BEGIN optional_statements END
Token: Code=263  Line= 20  Col= 15   Name= PERIOD       Spelling= '.'
#04 program_body -> compound_statement PERIOD
#01 program -> program_head program_declarations program_body
Locality: lexical level 1

  Symbol(Variable Symbol) id(a)
    type(Boolean)
      size(1) alignment(1)
    lexicallevel(1) address(5)
  Symbol(Variable Symbol) id(b)
    type(Boolean)
      size(1) alignment(1)
    lexicallevel(1) address(6)

Locality: lexical level 0

Symbol(Standard Function Symbol) id(abs)
  type(Void)
    size(0) alignment(0)
  cspid(abs)
Symbol(Type Symbol) id(boolean)
  type(Boolean)
    size(1) alignment(1)
Symbol(Type Symbol) id(char)
  type(Character)
    size(1) alignment(1)
Symbol(Standard Function Symbol) id(chr)
  type(Void)
    size(0) alignment(0)
  cspid(chr)
Symbol(Constant Symbol) id(false)
  type(Boolean)
    size(1) alignment(1)
  Constant value(0)
    type(Boolean)
      size(1) alignment(1)
Symbol(Type Symbol) id(integer)
  type(Integer)
    size(1) alignment(1)
Symbol(Standard Function Symbol) id(ord)
  type(Void)
    size(0) alignment(0)
  cspid(ord)
Symbol(Program Symbol) id(p067_000)
  type(Void)
    size(0) alignment(0)
  lexicallevel(0) elabel(L00001) splabel(L00002) eplabel(L00003)
Symbol(Standard Function Symbol) id(pred)
  type(Void)
    size(0) alignment(0)
  cspid(dec)
Symbol(Standard Procedure Symbol) id(readchar)
  type(Void)
    size(0) alignment(0)
  cspid(rdc)
Symbol(Standard Procedure Symbol) id(readinteger)
  type(Void)
    size(0) alignment(0)
  cspid(rdi)
Symbol(Standard Procedure Symbol) id(readln)
  type(Void)
    size(0) alignment(0)
  cspid(rln)
Symbol(Standard Procedure Symbol) id(readreal)
  type(Void)
    size(0) alignment(0)
  cspid(rdr)
Symbol(Standard Procedure Symbol) id(readstring)
  type(Void)
    size(0) alignment(0)
  cspid(rds)
Symbol(Type Symbol) id(real)
  type(Real)
    size(1) alignment(1)
Symbol(Standard Function Symbol) id(round)
  type(Void)
    size(0) alignment(0)
  cspid(rnd)
Symbol(Standard Function Symbol) id(sqrt)
  type(Void)
    size(0) alignment(0)
  cspid(sqt)
Symbol(Standard Function Symbol) id(succ)
  type(Void)
    size(0) alignment(0)
  cspid(inc)
Symbol(Constant Symbol) id(true)
  type(Boolean)
    size(1) alignment(1)
  Constant value(1)
    type(Boolean)
      size(1) alignment(1)
Symbol(Standard Function Symbol) id(trunc)
  type(Void)
    size(0) alignment(0)
  cspid(trc)
Symbol(Standard Procedure Symbol) id(writeboolean)
  type(Void)
    size(0) alignment(0)
  cspid(wrb)
Symbol(Standard Procedure Symbol) id(writechar)
  type(Void)
    size(0) alignment(0)
  cspid(wrc)
Symbol(Standard Procedure Symbol) id(writeexponential)
  type(Void)
    size(0) alignment(0)
  cspid(wre)
Symbol(Standard Procedure Symbol) id(writefixed)
  type(Void)
    size(0) alignment(0)
  cspid(wrf)
Symbol(Standard Procedure Symbol) id(writeinteger)
  type(Void)
    size(0) alignment(0)
  cspid(wri)
Symbol(Standard Procedure Symbol) id(writeln)
  type(Void)
    size(0) alignment(0)
  cspid(wln)
Symbol(Standard Procedure Symbol) id(writestring)
  type(Void)
    size(0) alignment(0)
  cspid(wrs)
