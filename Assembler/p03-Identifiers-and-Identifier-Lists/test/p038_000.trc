
       **Start of Parse**


Token: Code=293  Line= 12  Col= 8    Name= PROGRAM      Spelling= 'program'
Token: Code=300  Line= 12  Col= 17   Name= ID           Spelling= 'p038_000'
Token: Code=265  Line= 12  Col= 18   Name= SEMICOLON    Spelling= ';'
#05 program_parameters -> EMPTY
#02 program_head -> program ID(program) program_parameters SEMICOLON
#10 declarations -> EMPTY
Token: Code=286  Line= 13  Col= 11   Name= FUNCTION     Spelling= 'function'
#15 subprogram_declarations -> EMPTY
Token: Code=300  Line= 13  Col= 15   Name= ID           Spelling= 'max'
Token: Code=273  Line= 13  Col= 16   Name= LPAREN       Spelling= '('
Token: Code=300  Line= 13  Col= 17   Name= ID           Spelling= 'a'
#08 identifier_list -> ID(() identifier_list = {(
Token: Code=264  Line= 13  Col= 18   Name= COMMA        Spelling= ','
Token: Code=300  Line= 13  Col= 19   Name= ID           Spelling= 'b'
#09 identifier_list -> identifier_list , ID(,) identifier_list = {(, ,
Token: Code=266  Line= 13  Col= 20   Name= COLON        Spelling= ':'
Token: Code=300  Line= 13  Col= 27   Name= ID           Spelling= 'integer'
#14 standard_type -> ID(:)
#12 type -> standard_type
#22 parameter_list -> identifier_list : type
Token: Code=274  Line= 13  Col= 28   Name= RPAREN       Spelling= ')'
#21 subprogram_parameters -> ( parameter_list )
Token: Code=266  Line= 13  Col= 29   Name= COLON        Spelling= ':'
Token: Code=300  Line= 13  Col= 36   Name= ID           Spelling= 'integer'
#14 standard_type -> ID(:)
Token: Code=265  Line= 13  Col= 37   Name= SEMICOLON    Spelling= ';'
#18 subprogram_head -> function ID(function) subprogram_parameters : standard_type ;
#10 declarations -> EMPTY
Token: Code=281  Line= 14  Col= 8    Name= BEGIN        Spelling= 'begin'
Token: Code=287  Line= 15  Col= 7    Name= IF           Spelling= 'if'
Token: Code=300  Line= 15  Col= 9    Name= ID           Spelling= 'a'
Token: Code=271  Line= 15  Col= 10   Name= GRT          Spelling= '>'
#63 factor -> ID(if)
#56 term -> factor
#48 simple_expression -> term
#46 relop -> >
Token: Code=300  Line= 15  Col= 11   Name= ID           Spelling= 'b'
Token: Code=294  Line= 15  Col= 16   Name= THEN         Spelling= 'then'
#63 factor -> ID(>)
#56 term -> factor
#48 simple_expression -> term
#41 expression -> simple_expression relop simple_expression
Token: Code=300  Line= 15  Col= 20   Name= ID           Spelling= 'max'
Token: Code=262  Line= 15  Col= 22   Name= ASSIGN       Spelling= ':='
#34 variable -> ID(then)
Token: Code=300  Line= 15  Col= 23   Name= ID           Spelling= 'a'
Token: Code=284  Line= 15  Col= 28   Name= ELSE         Spelling= 'else'
#63 factor -> ID(:=)
#56 term -> factor
#48 simple_expression -> term
#40 expression -> simple_expression
#29 statement -> variable := expression
Token: Code=300  Line= 15  Col= 32   Name= ID           Spelling= 'max'
Token: Code=262  Line= 15  Col= 34   Name= ASSIGN       Spelling= ':='
#34 variable -> ID(else)
Token: Code=300  Line= 15  Col= 35   Name= ID           Spelling= 'b'
Token: Code=285  Line= 16  Col= 6    Name= END          Spelling= 'end'
#63 factor -> ID(:=)
#56 term -> factor
#48 simple_expression -> term
#40 expression -> simple_expression
#29 statement -> variable := expression
#32 statement -> if expression then statement else statement
#27 statement_list -> statement
#26 optional_statements -> statement_list
#24 compound_statement -> BEGIN optional_statements END
#17 subprogram_declarations -> subprogram_head declarations compound_statement
Token: Code=265  Line= 16  Col= 12   Name= SEMICOLON    Spelling= ';'
#16 subprogram_declarations -> subprogram_declarations subprogram_declaration ;
Token: Code=292  Line= 17  Col= 12   Name= PROCEDURE    Spelling= 'procedure'
Token: Code=300  Line= 17  Col= 18   Name= ID           Spelling= 'print'
Token: Code=273  Line= 17  Col= 19   Name= LPAREN       Spelling= '('
Token: Code=300  Line= 17  Col= 20   Name= ID           Spelling= 'a'
#08 identifier_list -> ID(() identifier_list = {(
Token: Code=266  Line= 17  Col= 21   Name= COLON        Spelling= ':'
Token: Code=300  Line= 17  Col= 28   Name= ID           Spelling= 'integer'
#14 standard_type -> ID(:)
#12 type -> standard_type
#22 parameter_list -> identifier_list : type
Token: Code=265  Line= 17  Col= 29   Name= SEMICOLON    Spelling= ';'
Token: Code=300  Line= 17  Col= 30   Name= ID           Spelling= 'b'
#08 identifier_list -> ID(;) identifier_list = {;
Token: Code=266  Line= 17  Col= 31   Name= COLON        Spelling= ':'
Token: Code=300  Line= 17  Col= 38   Name= ID           Spelling= 'integer'
#14 standard_type -> ID(:)
#12 type -> standard_type
#23 parameter_list -> parameter_list ; identifier_list : type
Token: Code=274  Line= 17  Col= 39   Name= RPAREN       Spelling= ')'
#21 subprogram_parameters -> ( parameter_list )
Token: Code=265  Line= 17  Col= 40   Name= SEMICOLON    Spelling= ';'
#19 subprogram_head -> procedure ID(procedure) subprogram_parameters ;
#10 declarations -> EMPTY
Token: Code=281  Line= 18  Col= 8    Name= BEGIN        Spelling= 'begin'
Token: Code=300  Line= 19  Col= 10   Name= ID           Spelling= 'write'
Token: Code=273  Line= 19  Col= 11   Name= LPAREN       Spelling= '('
Token: Code=303  Line= 19  Col= 28   Name= CHRLIT       Spelling= ''The maximum of ''
#70 factor -> CHRLIT('The maximum of ')
#56 term -> factor
Token: Code=274  Line= 19  Col= 29   Name= RPAREN       Spelling= ')'
#48 simple_expression -> term
#40 expression -> simple_expression
#38 expression_list -> expression
#37 ID(begin) ( expression_list )
#30 statement -> procedure_statement
#27 statement_list -> statement
Token: Code=265  Line= 19  Col= 30   Name= SEMICOLON    Spelling= ';'
Token: Code=300  Line= 20  Col= 10   Name= ID           Spelling= 'write'
Token: Code=273  Line= 20  Col= 11   Name= LPAREN       Spelling= '('
Token: Code=300  Line= 20  Col= 12   Name= ID           Spelling= 'a'
Token: Code=274  Line= 20  Col= 13   Name= RPAREN       Spelling= ')'
#63 factor -> ID(()
#56 term -> factor
#48 simple_expression -> term
#40 expression -> simple_expression
#38 expression_list -> expression
#37 ID(;) ( expression_list )
#30 statement -> procedure_statement
#28 statement_list -> statement_list SEMICOLON statement
Token: Code=265  Line= 20  Col= 14   Name= SEMICOLON    Spelling= ';'
Token: Code=300  Line= 21  Col= 10   Name= ID           Spelling= 'write'
Token: Code=273  Line= 21  Col= 11   Name= LPAREN       Spelling= '('
Token: Code=303  Line= 21  Col= 18   Name= CHRLIT       Spelling= '' and ''
#70 factor -> CHRLIT(' and ')
#56 term -> factor
Token: Code=274  Line= 21  Col= 19   Name= RPAREN       Spelling= ')'
#48 simple_expression -> term
#40 expression -> simple_expression
#38 expression_list -> expression
#37 ID(;) ( expression_list )
#30 statement -> procedure_statement
#28 statement_list -> statement_list SEMICOLON statement
Token: Code=265  Line= 21  Col= 20   Name= SEMICOLON    Spelling= ';'
Token: Code=300  Line= 22  Col= 10   Name= ID           Spelling= 'write'
Token: Code=273  Line= 22  Col= 11   Name= LPAREN       Spelling= '('
Token: Code=300  Line= 22  Col= 12   Name= ID           Spelling= 'b'
Token: Code=274  Line= 22  Col= 13   Name= RPAREN       Spelling= ')'
#63 factor -> ID(()
#56 term -> factor
#48 simple_expression -> term
#40 expression -> simple_expression
#38 expression_list -> expression
#37 ID(;) ( expression_list )
#30 statement -> procedure_statement
#28 statement_list -> statement_list SEMICOLON statement
Token: Code=265  Line= 22  Col= 14   Name= SEMICOLON    Spelling= ';'
Token: Code=300  Line= 23  Col= 10   Name= ID           Spelling= 'write'
Token: Code=273  Line= 23  Col= 11   Name= LPAREN       Spelling= '('
Token: Code=303  Line= 23  Col= 17   Name= CHRLIT       Spelling= '' is ''
#70 factor -> CHRLIT(' is ')
#56 term -> factor
Token: Code=274  Line= 23  Col= 18   Name= RPAREN       Spelling= ')'
#48 simple_expression -> term
#40 expression -> simple_expression
#38 expression_list -> expression
#37 ID(;) ( expression_list )
#30 statement -> procedure_statement
#28 statement_list -> statement_list SEMICOLON statement
Token: Code=265  Line= 23  Col= 19   Name= SEMICOLON    Spelling= ';'
Token: Code=300  Line= 24  Col= 10   Name= ID           Spelling= 'write'
Token: Code=273  Line= 24  Col= 11   Name= LPAREN       Spelling= '('
Token: Code=300  Line= 24  Col= 14   Name= ID           Spelling= 'max'
Token: Code=273  Line= 24  Col= 15   Name= LPAREN       Spelling= '('
Token: Code=300  Line= 24  Col= 16   Name= ID           Spelling= 'a'
Token: Code=264  Line= 24  Col= 17   Name= COMMA        Spelling= ','
#63 factor -> ID(()
#56 term -> factor
#48 simple_expression -> term
#40 expression -> simple_expression
#38 expression_list -> expression
Token: Code=300  Line= 24  Col= 18   Name= ID           Spelling= 'b'
Token: Code=274  Line= 24  Col= 19   Name= RPAREN       Spelling= ')'
#63 factor -> ID(,)
#56 term -> factor
#48 simple_expression -> term
#40 expression -> simple_expression
#39 expression_list -> expression_list , expression
#65 factor -> ID(() LPAREN expression_list RPAREN
#56 term -> factor
Token: Code=274  Line= 24  Col= 20   Name= RPAREN       Spelling= ')'
#48 simple_expression -> term
#40 expression -> simple_expression
#38 expression_list -> expression
#37 ID(;) ( expression_list )
#30 statement -> procedure_statement
#28 statement_list -> statement_list SEMICOLON statement
Token: Code=265  Line= 24  Col= 21   Name= SEMICOLON    Spelling= ';'
Token: Code=300  Line= 25  Col= 12   Name= ID           Spelling= 'writeln'
Token: Code=285  Line= 26  Col= 6    Name= END          Spelling= 'end'
#36 procedure_statement -> ID(;)
#30 statement -> procedure_statement
#28 statement_list -> statement_list SEMICOLON statement
#26 optional_statements -> statement_list
#24 compound_statement -> BEGIN optional_statements END
#17 subprogram_declarations -> subprogram_head declarations compound_statement
Token: Code=265  Line= 26  Col= 14   Name= SEMICOLON    Spelling= ';'
#16 subprogram_declarations -> subprogram_declarations subprogram_declaration ;
Token: Code=281  Line= 27  Col= 6    Name= BEGIN        Spelling= 'begin'
#03 program_declarations -> declarations subprogram_declarations
Token: Code=300  Line= 28  Col= 8    Name= ID           Spelling= 'print'
Token: Code=273  Line= 28  Col= 9    Name= LPAREN       Spelling= '('
Token: Code=301  Line= 28  Col= 10   Name= INTLIT       Spelling= '2'
#68 factor -> INTLIT(2)
#56 term -> factor
Token: Code=264  Line= 28  Col= 11   Name= COMMA        Spelling= ','
#48 simple_expression -> term
#40 expression -> simple_expression
#38 expression_list -> expression
Token: Code=301  Line= 28  Col= 12   Name= INTLIT       Spelling= '3'
#68 factor -> INTLIT(3)
#56 term -> factor
Token: Code=274  Line= 28  Col= 13   Name= RPAREN       Spelling= ')'
#48 simple_expression -> term
#40 expression -> simple_expression
#39 expression_list -> expression_list , expression
#37 ID(begin) ( expression_list )
#30 statement -> procedure_statement
#27 statement_list -> statement
Token: Code=285  Line= 29  Col= 4    Name= END          Spelling= 'end'
#26 optional_statements -> statement_list
#24 compound_statement -> BEGIN optional_statements END
Token: Code=263  Line= 29  Col= 15   Name= PERIOD       Spelling= '.'
#04 program_body -> compound_statement PERIOD
#01 program -> program_head program_declarations program_body
       **End of Parse**

