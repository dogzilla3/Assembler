       **Start of Scan**

Token: Code=293  Line= 12  Col= 8    Name= PROGRAM      Spelling= 'program'
Token: Code=300  Line= 12  Col= 17   Name= ID           Spelling= 'p067_000'
Token: Code=265  Line= 12  Col= 18   Name= SEMICOLON    Spelling= ';'
Token: Code=297  Line= 13  Col= 6    Name= VAR          Spelling= 'var'
Token: Code=300  Line= 13  Col= 8    Name= ID           Spelling= 'a'
Token: Code=264  Line= 13  Col= 9    Name= COMMA        Spelling= ','
Token: Code=300  Line= 13  Col= 10   Name= ID           Spelling= 'b'
Token: Code=266  Line= 13  Col= 11   Name= COLON        Spelling= ':'
Token: Code=300  Line= 13  Col= 18   Name= ID           Spelling= 'boolean'
Token: Code=265  Line= 13  Col= 19   Name= SEMICOLON    Spelling= ';'
Token: Code=281  Line= 14  Col= 6    Name= BEGIN        Spelling= 'begin'
Token: Code=300  Line= 15  Col= 4    Name= ID           Spelling= 'a'
Token: Code=262  Line= 15  Col= 6    Name= ASSIGN       Spelling= ':='
Token: Code=300  Line= 15  Col= 11   Name= ID           Spelling= 'false'
Token: Code=265  Line= 15  Col= 12   Name= SEMICOLON    Spelling= ';'
Token: Code=300  Line= 15  Col= 13   Name= ID           Spelling= 'b'
Token: Code=262  Line= 15  Col= 15   Name= ASSIGN       Spelling= ':='
Token: Code=300  Line= 15  Col= 20   Name= ID           Spelling= 'false'
Token: Code=265  Line= 15  Col= 21   Name= SEMICOLON    Spelling= ';'
Token: Code=300  Line= 16  Col= 8    Name= ID           Spelling= 'write'
Token: Code=273  Line= 16  Col= 9    Name= LPAREN       Spelling= '('
Token: Code=289  Line= 16  Col= 12   Name= NOT          Spelling= 'not'
Token: Code=273  Line= 16  Col= 13   Name= LPAREN       Spelling= '('
Token: Code=300  Line= 16  Col= 14   Name= ID           Spelling= 'a'
Token: Code=279  Line= 16  Col= 18   Name= AND          Spelling= 'and'
Token: Code=300  Line= 16  Col= 20   Name= ID           Spelling= 'b'
Token: Code=274  Line= 16  Col= 21   Name= RPAREN       Spelling= ')'
Token: Code=274  Line= 16  Col= 22   Name= RPAREN       Spelling= ')'
Token: Code=265  Line= 16  Col= 23   Name= SEMICOLON    Spelling= ';'
Token: Code=300  Line= 17  Col= 8    Name= ID           Spelling= 'write'
Token: Code=273  Line= 17  Col= 9    Name= LPAREN       Spelling= '('
Token: Code=303  Line= 17  Col= 14   Name= CHRLIT       Spelling= '' = ''
Token: Code=274  Line= 17  Col= 15   Name= RPAREN       Spelling= ')'
Token: Code=265  Line= 17  Col= 16   Name= SEMICOLON    Spelling= ';'
Token: Code=300  Line= 18  Col= 8    Name= ID           Spelling= 'write'
Token: Code=273  Line= 18  Col= 9    Name= LPAREN       Spelling= '('
Token: Code=289  Line= 18  Col= 12   Name= NOT          Spelling= 'not'
Token: Code=300  Line= 18  Col= 14   Name= ID           Spelling= 'a'
Token: Code=291  Line= 18  Col= 17   Name= OR           Spelling= 'or'
Token: Code=289  Line= 18  Col= 21   Name= NOT          Spelling= 'not'
Token: Code=300  Line= 18  Col= 23   Name= ID           Spelling= 'b'
Token: Code=274  Line= 18  Col= 24   Name= RPAREN       Spelling= ')'
Token: Code=265  Line= 18  Col= 25   Name= SEMICOLON    Spelling= ';'
Token: Code=300  Line= 19  Col= 10   Name= ID           Spelling= 'writeln'
Token: Code=285  Line= 20  Col= 4    Name= END          Spelling= 'end'
Token: Code=263  Line= 20  Col= 15   Name= PERIOD       Spelling= '.'

       **End of Scan**


       **Start of Parse**


#05 program_parameters -> EMPTY
#02 program_head -> program id program_parameters SEMICOLON
#10 declarations -> EMPTY
#08 identifier_list -> ID
#09 identifier_list -> identifier_list , ID
#14 standard_type -> ID
#12 type -> standard_type
#11 declarations -> declarations VAR identifier_list : type SEMICOLON
#15 subprogram_declarations -> EMPTY
#03 program_declarations -> declarations subprogram_declarations
#34 variable -> ID
#63 factor -> ID
#56 term -> factor
#48 simple_expression -> term
#40 expression -> simple_expression
#29 statement -> variable := expression
#27 statement_list -> statement
#34 variable -> ID
#63 factor -> ID
#56 term -> factor
#48 simple_expression -> term
#40 expression -> simple_expression
#29 statement -> variable := expression
#28 statement_list -> statement_list SEMICOLON statement
#63 factor -> ID
#56 term -> factor
#62 mulop -> AND
#63 factor -> ID
#57 term -> term mulop factor
#48 simple_expression -> term
#40 expression -> simple_expression
#66 mulop -> LPAREN expression RPAREN
#67 mulop -> NOT factor
#56 term -> factor
#48 simple_expression -> term
#40 expression -> simple_expression
#38 expression_list -> expression
#37 ID ( expression_list )
#30 statement -> procedure_statement
#28 statement_list -> statement_list SEMICOLON statement
#70 factor -> CHRLIT
#56 term -> factor
#48 simple_expression -> term
#40 expression -> simple_expression
#38 expression_list -> expression
#37 ID ( expression_list )
#30 statement -> procedure_statement
#28 statement_list -> statement_list SEMICOLON statement
#63 factor -> ID
#67 mulop -> NOT factor
#56 term -> factor
#48 simple_expression -> term
#55 procedure_statement -> or
#63 factor -> ID
#67 mulop -> NOT factor
#56 term -> factor
#50 simple_expression -> simple_expression addop term
#40 expression -> simple_expression
#38 expression_list -> expression
#37 ID ( expression_list )
#30 statement -> procedure_statement
#28 statement_list -> statement_list SEMICOLON statement
#36 procedure_statement -> ID
#30 statement -> procedure_statement
#28 statement_list -> statement_list SEMICOLON statement
#26 optional_statements -> statement_list
#24 compound_statement -> BEGIN optional_statements END
#04 program_body -> compound_statement PERIOD
#01 program -> program_head program_declarations program_body
       **End of Parse**

