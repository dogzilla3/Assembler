
       **Start of Parse**


Token: Code=293  Line= 12  Col= 8    Name= PROGRAM      Spelling= 'program'
Token: Code=300  Line= 12  Col= 17   Name= ID           Spelling= 'p066_000'
Token: Code=265  Line= 12  Col= 18   Name= SEMICOLON    Spelling= ';'
#05 program_parameters -> EMPTY
#02 program_head -> program ID(p066_000) program_parameters SEMICOLON
#10 declarations -> EMPTY
Token: Code=297  Line= 13  Col= 6    Name= VAR          Spelling= 'var'
Token: Code=300  Line= 13  Col= 8    Name= ID           Spelling= 'c'
#08 identifier_list -> ID(c) identifier_list ={c}
Token: Code=266  Line= 13  Col= 9    Name= COLON        Spelling= ':'
Token: Code=300  Line= 13  Col= 13   Name= ID           Spelling= 'real'
#14 standard_type -> ID(real)
#12 type -> standard_type
Token: Code=265  Line= 13  Col= 14   Name= SEMICOLON    Spelling= ';'
#11 declarations -> declarations VAR identifier_list {c} : type SEMICOLON
Token: Code=286  Line= 14  Col= 11   Name= FUNCTION     Spelling= 'function'
#15 subprogram_declarations -> EMPTY
Token: Code=300  Line= 14  Col= 19   Name= ID           Spelling= 'celsius'
Token: Code=273  Line= 14  Col= 20   Name= LPAREN       Spelling= '('
Token: Code=300  Line= 14  Col= 21   Name= ID           Spelling= 'f'
#08 identifier_list -> ID(f) identifier_list ={f}
Token: Code=266  Line= 14  Col= 22   Name= COLON        Spelling= ':'
Token: Code=300  Line= 14  Col= 26   Name= ID           Spelling= 'real'
#14 standard_type -> ID(real)
#12 type -> standard_type
#22 parameter_list -> identifier_list : type
Token: Code=274  Line= 14  Col= 27   Name= RPAREN       Spelling= ')'
#21 subprogram_parameters -> ( parameter_list )
Token: Code=266  Line= 14  Col= 28   Name= COLON        Spelling= ':'
Token: Code=300  Line= 14  Col= 32   Name= ID           Spelling= 'real'
#14 standard_type -> ID(real)
Token: Code=265  Line= 14  Col= 33   Name= SEMICOLON    Spelling= ';'
#18 subprogram_head -> function ID(celsius) subprogram_parameters : standard_type ;
#10 declarations -> EMPTY
Token: Code=281  Line= 15  Col= 8    Name= BEGIN        Spelling= 'begin'
Token: Code=300  Line= 16  Col= 12   Name= ID           Spelling= 'celsius'
Token: Code=262  Line= 16  Col= 14   Name= ASSIGN       Spelling= ':='
#34 variable -> ID(celsius)
Token: Code=301  Line= 16  Col= 15   Name= INTLIT       Spelling= '5'
#68 factor -> INTLIT(5)
#56 term -> factor
Token: Code=260  Line= 16  Col= 16   Name= STAR         Spelling= '*'
#58 mulop -> *
Token: Code=273  Line= 16  Col= 17   Name= LPAREN       Spelling= '('
Token: Code=300  Line= 16  Col= 18   Name= ID           Spelling= 'f'
Token: Code=259  Line= 16  Col= 19   Name= MINUS        Spelling= '-'
#63 factor -> ID(f)
#56 term -> factor
#48 simple_expression -> term
#54 addop -> -
Token: Code=301  Line= 16  Col= 21   Name= INTLIT       Spelling= '32'
#68 factor -> INTLIT(32)
#56 term -> factor
Token: Code=274  Line= 16  Col= 22   Name= RPAREN       Spelling= ')'
#50 simple_expression -> simple_expression addop term
#40 expression -> simple_expression
#66 mulop -> LPAREN expression RPAREN
#57 term -> term mulop factor
Token: Code=261  Line= 16  Col= 23   Name= SLASH        Spelling= '/'
#59 mulop -> /
Token: Code=301  Line= 16  Col= 24   Name= INTLIT       Spelling= '9'
#68 factor -> INTLIT(9)
#57 term -> term mulop factor
Token: Code=285  Line= 17  Col= 6    Name= END          Spelling= 'end'
#48 simple_expression -> term
#40 expression -> simple_expression
#29 statement -> variable := expression
#27 statement_list -> statement
#26 optional_statements -> statement_list
#24 compound_statement -> BEGIN optional_statements END
#17 subprogram_declarations -> subprogram_head declarations compound_statement
Token: Code=265  Line= 17  Col= 16   Name= SEMICOLON    Spelling= ';'
#16 subprogram_declarations -> subprogram_declarations subprogram_declaration ;
Token: Code=281  Line= 18  Col= 6    Name= BEGIN        Spelling= 'begin'
#03 program_declarations -> declarations subprogram_declarations
Token: Code=300  Line= 19  Col= 4    Name= ID           Spelling= 'c'
Token: Code=262  Line= 19  Col= 6    Name= ASSIGN       Spelling= ':='
#34 variable -> ID(c)
Token: Code=300  Line= 19  Col= 13   Name= ID           Spelling= 'celsius'
Token: Code=273  Line= 19  Col= 14   Name= LPAREN       Spelling= '('
Token: Code=301  Line= 19  Col= 16   Name= INTLIT       Spelling= '77'
#68 factor -> INTLIT(77)
#56 term -> factor
Token: Code=274  Line= 19  Col= 17   Name= RPAREN       Spelling= ')'
#48 simple_expression -> term
#40 expression -> simple_expression
#38 expression_list -> expression
#65 factor -> ID(celsius) LPAREN expression_list RPAREN
#56 term -> factor
Token: Code=285  Line= 20  Col= 4    Name= END          Spelling= 'end'
#48 simple_expression -> term
#40 expression -> simple_expression
#29 statement -> variable := expression
#27 statement_list -> statement
#26 optional_statements -> statement_list
#24 compound_statement -> BEGIN optional_statements END
Token: Code=263  Line= 20  Col= 15   Name= PERIOD       Spelling= '.'
#04 program_body -> compound_statement PERIOD
#01 program -> program_head program_declarations program_body
       **End of Parse**

