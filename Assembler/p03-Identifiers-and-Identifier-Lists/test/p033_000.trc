
       **Start of Parse**


Token: Code=293  Line= 12  Col= 8    Name= PROGRAM      Spelling= 'program'
Token: Code=300  Line= 12  Col= 17   Name= ID           Spelling= 'p033_000'
Token: Code=265  Line= 12  Col= 18   Name= SEMICOLON    Spelling= ';'
#05 program_parameters -> EMPTY
#02 program_head -> program ID(p033_000) program_parameters SEMICOLON
#10 declarations -> EMPTY
Token: Code=297  Line= 13  Col= 6    Name= VAR          Spelling= 'var'
Token: Code=300  Line= 13  Col= 12   Name= ID           Spelling= 'count'
#08 identifier_list -> ID(count) identifier_list ={count}
Token: Code=266  Line= 13  Col= 13   Name= COLON        Spelling= ':'
Token: Code=300  Line= 13  Col= 20   Name= ID           Spelling= 'integer'
#14 standard_type -> ID(integer)
#12 type -> standard_type
Token: Code=265  Line= 13  Col= 21   Name= SEMICOLON    Spelling= ';'
#11 declarations -> declarations VAR identifier_list {count} : type SEMICOLON
Token: Code=281  Line= 14  Col= 6    Name= BEGIN        Spelling= 'begin'
#15 subprogram_declarations -> EMPTY
#03 program_declarations -> declarations subprogram_declarations
Token: Code=300  Line= 15  Col= 8    Name= ID           Spelling= 'count'
Token: Code=262  Line= 15  Col= 10   Name= ASSIGN       Spelling= ':='
#34 variable -> ID(count)
Token: Code=301  Line= 15  Col= 12   Name= INTLIT       Spelling= '10'
#68 factor -> INTLIT(10)
#56 term -> factor
Token: Code=265  Line= 15  Col= 13   Name= SEMICOLON    Spelling= ';'
#48 simple_expression -> term
#40 expression -> simple_expression
#29 statement -> variable := expression
#27 statement_list -> statement
Token: Code=298  Line= 16  Col= 8    Name= WHILE        Spelling= 'while'
Token: Code=300  Line= 16  Col= 14   Name= ID           Spelling= 'count'
Token: Code=272  Line= 16  Col= 16   Name= GEQ          Spelling= '>='
#63 factor -> ID(count)
#56 term -> factor
#48 simple_expression -> term
#47 relop -> >=
Token: Code=301  Line= 16  Col= 17   Name= INTLIT       Spelling= '0'
#68 factor -> INTLIT(0)
#56 term -> factor
Token: Code=283  Line= 16  Col= 20   Name= DO           Spelling= 'do'
#48 simple_expression -> term
#41 expression -> simple_expression relop simple_expression
Token: Code=281  Line= 17  Col= 8    Name= BEGIN        Spelling= 'begin'
Token: Code=300  Line= 18  Col= 10   Name= ID           Spelling= 'write'
Token: Code=273  Line= 18  Col= 11   Name= LPAREN       Spelling= '('
Token: Code=300  Line= 18  Col= 16   Name= ID           Spelling= 'count'
Token: Code=264  Line= 18  Col= 17   Name= COMMA        Spelling= ','
#63 factor -> ID(count)
#56 term -> factor
#48 simple_expression -> term
#40 expression -> simple_expression
#38 expression_list -> expression
Token: Code=303  Line= 18  Col= 21   Name= CHRLIT       Spelling= '', ''
#70 factor -> CHRLIT(', ')
#56 term -> factor
Token: Code=274  Line= 18  Col= 22   Name= RPAREN       Spelling= ')'
#48 simple_expression -> term
#40 expression -> simple_expression
#39 expression_list -> expression_list , expression
#37 ID(write) ( expression_list )
#30 statement -> procedure_statement
#27 statement_list -> statement
Token: Code=265  Line= 18  Col= 23   Name= SEMICOLON    Spelling= ';'
Token: Code=300  Line= 19  Col= 10   Name= ID           Spelling= 'count'
Token: Code=262  Line= 19  Col= 12   Name= ASSIGN       Spelling= ':='
#34 variable -> ID(count)
Token: Code=300  Line= 19  Col= 17   Name= ID           Spelling= 'count'
Token: Code=259  Line= 19  Col= 18   Name= MINUS        Spelling= '-'
#63 factor -> ID(count)
#56 term -> factor
#48 simple_expression -> term
#54 addop -> -
Token: Code=301  Line= 19  Col= 19   Name= INTLIT       Spelling= '1'
#68 factor -> INTLIT(1)
#56 term -> factor
Token: Code=285  Line= 20  Col= 6    Name= END          Spelling= 'end'
#50 simple_expression -> simple_expression addop term
#40 expression -> simple_expression
#29 statement -> variable := expression
#28 statement_list -> statement_list SEMICOLON statement
#26 optional_statements -> statement_list
#24 compound_statement -> BEGIN optional_statements END
#31 statement -> compound_statement
#33 statement -> while expression do statement
#28 statement_list -> statement_list SEMICOLON statement
Token: Code=265  Line= 20  Col= 14   Name= SEMICOLON    Spelling= ';'
Token: Code=300  Line= 21  Col= 10   Name= ID           Spelling= 'writeln'
Token: Code=273  Line= 21  Col= 11   Name= LPAREN       Spelling= '('
Token: Code=303  Line= 21  Col= 23   Name= CHRLIT       Spelling= ''Blast off!''
#70 factor -> CHRLIT('Blast off!')
#56 term -> factor
Token: Code=274  Line= 21  Col= 24   Name= RPAREN       Spelling= ')'
#48 simple_expression -> term
#40 expression -> simple_expression
#38 expression_list -> expression
#37 ID(writeln) ( expression_list )
#30 statement -> procedure_statement
#28 statement_list -> statement_list SEMICOLON statement
Token: Code=285  Line= 22  Col= 4    Name= END          Spelling= 'end'
#26 optional_statements -> statement_list
#24 compound_statement -> BEGIN optional_statements END
Token: Code=263  Line= 22  Col= 15   Name= PERIOD       Spelling= '.'
#04 program_body -> compound_statement PERIOD
#01 program -> program_head program_declarations program_body
       **End of Parse**

