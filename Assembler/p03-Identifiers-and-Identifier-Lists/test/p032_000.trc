
       **Start of Parse**


Token: Code=293  Line= 12  Col= 8    Name= PROGRAM      Spelling= 'program'
Token: Code=300  Line= 12  Col= 17   Name= ID           Spelling= 'p032_000'
Token: Code=265  Line= 12  Col= 18   Name= SEMICOLON    Spelling= ';'
#05 program_parameters -> EMPTY
#02 program_head -> program ID(program) program_parameters SEMICOLON
#10 declarations -> EMPTY
Token: Code=297  Line= 13  Col= 6    Name= VAR          Spelling= 'var'
Token: Code=300  Line= 13  Col= 11   Name= ID           Spelling= 'cash'
#08 identifier_list -> ID(var) identifier_list = {var
Token: Code=266  Line= 13  Col= 12   Name= COLON        Spelling= ':'
Token: Code=300  Line= 13  Col= 16   Name= ID           Spelling= 'real'
#14 standard_type -> ID(:)
#12 type -> standard_type
Token: Code=265  Line= 13  Col= 17   Name= SEMICOLON    Spelling= ';'
#11 declarations -> declarations VAR identifier_list : type SEMICOLON
Token: Code=281  Line= 14  Col= 6    Name= BEGIN        Spelling= 'begin'
#15 subprogram_declarations -> EMPTY
#03 program_declarations -> declarations subprogram_declarations
Token: Code=300  Line= 15  Col= 8    Name= ID           Spelling= 'write'
Token: Code=273  Line= 15  Col= 9    Name= LPAREN       Spelling= '('
Token: Code=303  Line= 15  Col= 38   Name= CHRLIT       Spelling= ''How much cash do you have? ''
#70 factor -> CHRLIT('How much cash do you have? ')
#56 term -> factor
Token: Code=274  Line= 15  Col= 39   Name= RPAREN       Spelling= ')'
#48 simple_expression -> term
#40 expression -> simple_expression
#38 expression_list -> expression
#37 ID(begin) ( expression_list )
#30 statement -> procedure_statement
#27 statement_list -> statement
Token: Code=265  Line= 15  Col= 40   Name= SEMICOLON    Spelling= ';'
Token: Code=300  Line= 16  Col= 9    Name= ID           Spelling= 'readln'
Token: Code=273  Line= 16  Col= 10   Name= LPAREN       Spelling= '('
Token: Code=300  Line= 16  Col= 14   Name= ID           Spelling= 'cash'
Token: Code=274  Line= 16  Col= 15   Name= RPAREN       Spelling= ')'
#63 factor -> ID(()
#56 term -> factor
#48 simple_expression -> term
#40 expression -> simple_expression
#38 expression_list -> expression
#37 ID(;) ( expression_list )
#30 statement -> procedure_statement
#28 statement_list -> statement_list SEMICOLON statement
Token: Code=265  Line= 16  Col= 16   Name= SEMICOLON    Spelling= ';'
Token: Code=287  Line= 17  Col= 5    Name= IF           Spelling= 'if'
Token: Code=300  Line= 17  Col= 10   Name= ID           Spelling= 'cash'
Token: Code=269  Line= 17  Col= 11   Name= LES          Spelling= '<'
#63 factor -> ID(if)
#56 term -> factor
#48 simple_expression -> term
#44 relop -> <
Token: Code=302  Line= 17  Col= 16   Name= REALIT       Spelling= '100.0'
#69 factor -> REALIT(100.0)
#56 term -> factor
Token: Code=294  Line= 17  Col= 21   Name= THEN         Spelling= 'then'
#48 simple_expression -> term
#41 expression -> simple_expression relop simple_expression
Token: Code=281  Line= 18  Col= 10   Name= BEGIN        Spelling= 'begin'
Token: Code=300  Line= 19  Col= 14   Name= ID           Spelling= 'writeln'
Token: Code=273  Line= 19  Col= 15   Name= LPAREN       Spelling= '('
Token: Code=303  Line= 19  Col= 48   Name= CHRLIT       Spelling= ''You wicked and slothful person.''
#70 factor -> CHRLIT('You wicked and slothful person.')
#56 term -> factor
Token: Code=274  Line= 19  Col= 49   Name= RPAREN       Spelling= ')'
#48 simple_expression -> term
#40 expression -> simple_expression
#38 expression_list -> expression
#37 ID(begin) ( expression_list )
#30 statement -> procedure_statement
#27 statement_list -> statement
Token: Code=265  Line= 19  Col= 50   Name= SEMICOLON    Spelling= ';'
Token: Code=300  Line= 20  Col= 14   Name= ID           Spelling= 'writeln'
Token: Code=273  Line= 20  Col= 15   Name= LPAREN       Spelling= '('
Token: Code=303  Line= 20  Col= 44   Name= CHRLIT       Spelling= ''I''d never go out with you.''
#70 factor -> CHRLIT('I''d never go out with you.')
#56 term -> factor
Token: Code=274  Line= 20  Col= 45   Name= RPAREN       Spelling= ')'
#48 simple_expression -> term
#40 expression -> simple_expression
#38 expression_list -> expression
#37 ID(;) ( expression_list )
#30 statement -> procedure_statement
#28 statement_list -> statement_list SEMICOLON statement
Token: Code=285  Line= 21  Col= 8    Name= END          Spelling= 'end'
#26 optional_statements -> statement_list
#24 compound_statement -> BEGIN optional_statements END
#31 statement -> compound_statement
Token: Code=284  Line= 22  Col= 7    Name= ELSE         Spelling= 'else'
Token: Code=281  Line= 23  Col= 10   Name= BEGIN        Spelling= 'begin'
Token: Code=300  Line= 24  Col= 14   Name= ID           Spelling= 'writeln'
Token: Code=273  Line= 24  Col= 15   Name= LPAREN       Spelling= '('
Token: Code=303  Line= 24  Col= 65   Name= CHRLIT       Spelling= ''Come on, honey, let''s have a good time tonight!''
#70 factor -> CHRLIT('Come on, honey, let''s have a good time tonight!')
#56 term -> factor
Token: Code=274  Line= 24  Col= 66   Name= RPAREN       Spelling= ')'
#48 simple_expression -> term
#40 expression -> simple_expression
#38 expression_list -> expression
#37 ID(begin) ( expression_list )
#30 statement -> procedure_statement
#27 statement_list -> statement
Token: Code=285  Line= 25  Col= 8    Name= END          Spelling= 'end'
#26 optional_statements -> statement_list
#24 compound_statement -> BEGIN optional_statements END
#31 statement -> compound_statement
#32 statement -> if expression then statement else statement
#28 statement_list -> statement_list SEMICOLON statement
Token: Code=265  Line= 25  Col= 9    Name= SEMICOLON    Spelling= ';'
Token: Code=300  Line= 26  Col= 10   Name= ID           Spelling= 'writeln'
Token: Code=273  Line= 26  Col= 11   Name= LPAREN       Spelling= '('
Token: Code=303  Line= 26  Col= 27   Name= CHRLIT       Spelling= ''See you later!''
#70 factor -> CHRLIT('See you later!')
#56 term -> factor
Token: Code=274  Line= 26  Col= 28   Name= RPAREN       Spelling= ')'
#48 simple_expression -> term
#40 expression -> simple_expression
#38 expression_list -> expression
#37 ID(;) ( expression_list )
#30 statement -> procedure_statement
#28 statement_list -> statement_list SEMICOLON statement
Token: Code=285  Line= 27  Col= 4    Name= END          Spelling= 'end'
#26 optional_statements -> statement_list
#24 compound_statement -> BEGIN optional_statements END
Token: Code=263  Line= 27  Col= 15   Name= PERIOD       Spelling= '.'
#04 program_body -> compound_statement PERIOD
#01 program -> program_head program_declarations program_body
       **End of Parse**

