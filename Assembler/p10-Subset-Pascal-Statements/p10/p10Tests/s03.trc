
Token: Code=293  Line= 1   Col= 8    Name= PROGRAM      Spelling= 'program'
Token: Code=300  Line= 1   Col= 12   Name= ID           Spelling= 's03'
Token: Code=265  Line= 1   Col= 13   Name= SEMICOLON    Spelling= ';'
#05 program_parameters -> EMPTY
#02 program_head -> program ID(s03) program_parameters SEMICOLON
L00001

L00002

L00003

#10 variable_declarations -> EMPTY
Token: Code=297  Line= 2   Col= 5    Name= VAR          Spelling= 'var'
Token: Code=300  Line= 2   Col= 7    Name= ID           Spelling= 'b'
#08 identifier_list -> ID(b) identifier_list={b}
Token: Code=266  Line= 2   Col= 8    Name= COLON        Spelling= ':'
Token: Code=300  Line= 2   Col= 15   Name= ID           Spelling= 'boolean'
#14 standard_type -> ID(boolean)
Symbol(Type Symbol) id(boolean)
  type(Boolean)
    size(1) alignment(1)
#12 type -> standard_type
Token: Code=265  Line= 2   Col= 16   Name= SEMICOLON    Spelling= ';'
#11 variable_declarations -> variable_declarations VAR identifier_list  {b} : type SEMICOLON
Token: Code=297  Line= 3   Col= 5    Name= VAR          Spelling= 'var'
Token: Code=300  Line= 3   Col= 7    Name= ID           Spelling= 'c'
#08 identifier_list -> ID(c) identifier_list={c}
Token: Code=266  Line= 3   Col= 8    Name= COLON        Spelling= ':'
Token: Code=300  Line= 3   Col= 12   Name= ID           Spelling= 'char'
#14 standard_type -> ID(char)
Symbol(Type Symbol) id(char)
  type(Character)
    size(1) alignment(1)
#12 type -> standard_type
Token: Code=265  Line= 3   Col= 13   Name= SEMICOLON    Spelling= ';'
#11 variable_declarations -> variable_declarations VAR identifier_list  {c} : type SEMICOLON
Token: Code=297  Line= 4   Col= 5    Name= VAR          Spelling= 'var'
Token: Code=300  Line= 4   Col= 7    Name= ID           Spelling= 'i'
#08 identifier_list -> ID(i) identifier_list={i}
Token: Code=266  Line= 4   Col= 8    Name= COLON        Spelling= ':'
Token: Code=300  Line= 4   Col= 15   Name= ID           Spelling= 'integer'
#14 standard_type -> ID(integer)
Symbol(Type Symbol) id(integer)
  type(Integer)
    size(1) alignment(1)
#12 type -> standard_type
Token: Code=265  Line= 4   Col= 16   Name= SEMICOLON    Spelling= ';'
#11 variable_declarations -> variable_declarations VAR identifier_list  {i} : type SEMICOLON
Token: Code=281  Line= 5   Col= 6    Name= BEGIN        Spelling= 'begin'
#15 subprogram_declarations -> EMPTY
#03 program_declarations -> declarations subprogram_declarations
Token: Code=300  Line= 6   Col= 3    Name= ID           Spelling= 'b'
Token: Code=262  Line= 6   Col= 5    Name= ASSIGN       Spelling= ':='
#34 variable -> ID(b)
Symbol(Variable Symbol) id(b)
  type(Boolean)
    size(1) alignment(1)
  lexicallevel(1) address(5)
          lda       0         05        
Token: Code=289  Line= 6   Col= 8    Name= NOT          Spelling= 'not'
Token: Code=300  Line= 6   Col= 13   Name= ID           Spelling= 'true'
Token: Code=265  Line= 6   Col= 14   Name= SEMICOLON    Spelling= ';'
#63 factor -> ID(true)
Symbol(Constant Symbol) id(true)
  type(Boolean)
    size(1) alignment(1)
  Constant value(1)
    type(Boolean)
      size(1) alignment(1)
          ldc       b         1         
#67 mulop -> NOT factor
          not                           
#56 term -> factor
#48 simple_expression -> term
#40 expression -> simple_expression
#29 statement -> variable := expression
          lda       0         05        
          ldc       b         1         
          not                           
          sti       b                   
#27 statement_list -> statement
          lda       0         05        
          ldc       b         1         
          not                           
          sti       b                   
Token: Code=300  Line= 7   Col= 3    Name= ID           Spelling= 'c'
Token: Code=262  Line= 7   Col= 5    Name= ASSIGN       Spelling= ':='
#34 variable -> ID(c)
Symbol(Variable Symbol) id(c)
  type(Character)
    size(1) alignment(1)
  lexicallevel(1) address(6)
          lda       0         06        
Token: Code=303  Line= 7   Col= 8    Name= CHRLIT       Spelling= ''a''
#70 factor -> CHRLIT('a')
          ldc       c         'a'       
#56 term -> factor
Token: Code=265  Line= 7   Col= 9    Name= SEMICOLON    Spelling= ';'
#48 simple_expression -> term
#40 expression -> simple_expression
#29 statement -> variable := expression
          lda       0         06        
          ldc       c         'a'       
          sti       c                   
#28 statement_list -> statement_list SEMICOLON statement
          lda       0         05        
          ldc       b         1         
          not                           
          sti       b                   
          lda       0         06        
          ldc       c         'a'       
          sti       c                   
Token: Code=300  Line= 8   Col= 3    Name= ID           Spelling= 'i'
Token: Code=262  Line= 8   Col= 5    Name= ASSIGN       Spelling= ':='
#34 variable -> ID(i)
Symbol(Variable Symbol) id(i)
  type(Integer)
    size(1) alignment(1)
  lexicallevel(1) address(7)
          lda       0         07        
Token: Code=301  Line= 8   Col= 7    Name= INTLIT       Spelling= '29'
#68 factor -> INTLIT(29)
          ldc       i         29        
#56 term -> factor
Token: Code=285  Line= 9   Col= 4    Name= END          Spelling= 'end'
#48 simple_expression -> term
#40 expression -> simple_expression
#29 statement -> variable := expression
          lda       0         07        
          ldc       i         29        
          sti       i                   
#28 statement_list -> statement_list SEMICOLON statement
          lda       0         05        
          ldc       b         1         
          not                           
          sti       b                   
          lda       0         06        
          ldc       c         'a'       
          sti       c                   
          lda       0         07        
          ldc       i         29        
          sti       i                   
#26 optional_statements -> statement_list
          lda       0         05        
          ldc       b         1         
          not                           
          sti       b                   
          lda       0         06        
          ldc       c         'a'       
          sti       c                   
          lda       0         07        
          ldc       i         29        
          sti       i                   
#24 compound_statement -> BEGIN optional_statements END
          lda       0         05        
          ldc       b         1         
          not                           
          sti       b                   
          lda       0         06        
          ldc       c         'a'       
          sti       c                   
          lda       0         07        
          ldc       i         29        
          sti       i                   
Token: Code=263  Line= 9   Col= 10   Name= PERIOD       Spelling= '.'
#04 program_body -> compound_statement PERIOD
#01 program -> program_head program_declarations program_body
Locality: lexical level 1

  Symbol(Variable Symbol) id(b)
    type(Boolean)
      size(1) alignment(1)
    lexicallevel(1) address(5)
  Symbol(Variable Symbol) id(c)
    type(Character)
      size(1) alignment(1)
    lexicallevel(1) address(6)
  Symbol(Variable Symbol) id(i)
    type(Integer)
      size(1) alignment(1)
    lexicallevel(1) address(7)

Locality: lexical level 0

Symbol(Standard Function Symbol) id(abs)
  type(Void)
    size(0) alignment(0)
  cspid(abs)
Symbol(Type Symbol) id(boolean)
  type(Boolean)
    size(1) alignment(1)
Symbol(Type Symbol) id(char)
  type(Character)
    size(1) alignment(1)
Symbol(Standard Function Symbol) id(chr)
  type(Void)
    size(0) alignment(0)
  cspid(chr)
Symbol(Constant Symbol) id(false)
  type(Boolean)
    size(1) alignment(1)
  Constant value(0)
    type(Boolean)
      size(1) alignment(1)
Symbol(Type Symbol) id(integer)
  type(Integer)
    size(1) alignment(1)
Symbol(Standard Function Symbol) id(ord)
  type(Void)
    size(0) alignment(0)
  cspid(ord)
Symbol(Standard Function Symbol) id(pred)
  type(Void)
    size(0) alignment(0)
  cspid(dec)
Symbol(Standard Procedure Symbol) id(readchar)
  type(Void)
    size(0) alignment(0)
  cspid(rdc)
Symbol(Standard Procedure Symbol) id(readinteger)
  type(Void)
    size(0) alignment(0)
  cspid(rdi)
Symbol(Standard Procedure Symbol) id(readln)
  type(Void)
    size(0) alignment(0)
  cspid(rln)
Symbol(Standard Procedure Symbol) id(readreal)
  type(Void)
    size(0) alignment(0)
  cspid(rdr)
Symbol(Standard Procedure Symbol) id(readstring)
  type(Void)
    size(0) alignment(0)
  cspid(rds)
Symbol(Type Symbol) id(real)
  type(Real)
    size(1) alignment(1)
Symbol(Standard Function Symbol) id(round)
  type(Void)
    size(0) alignment(0)
  cspid(rnd)
In Print Function

Symbol(Procedure Symbol) id(s03)
  type(Subprogram)
      Return Type
        type(Void)
          size(0) alignment(0)
      Parameter Types
  lexicallevel(0) elabel(L00001) splabel(L00002) eplabel(L00003)
Symbol(Standard Function Symbol) id(sqrt)
  type(Void)
    size(0) alignment(0)
  cspid(sqt)
Symbol(Standard Function Symbol) id(succ)
  type(Void)
    size(0) alignment(0)
  cspid(inc)
Symbol(Constant Symbol) id(true)
  type(Boolean)
    size(1) alignment(1)
  Constant value(1)
    type(Boolean)
      size(1) alignment(1)
Symbol(Standard Function Symbol) id(trunc)
  type(Void)
    size(0) alignment(0)
  cspid(trc)
Symbol(Standard Procedure Symbol) id(writeboolean)
  type(Void)
    size(0) alignment(0)
  cspid(wrb)
Symbol(Standard Procedure Symbol) id(writechar)
  type(Void)
    size(0) alignment(0)
  cspid(wrc)
Symbol(Standard Procedure Symbol) id(writeexponential)
  type(Void)
    size(0) alignment(0)
  cspid(wre)
Symbol(Standard Procedure Symbol) id(writefixed)
  type(Void)
    size(0) alignment(0)
  cspid(wrf)
Symbol(Standard Procedure Symbol) id(writeinteger)
  type(Void)
    size(0) alignment(0)
  cspid(wri)
Symbol(Standard Procedure Symbol) id(writeln)
  type(Void)
    size(0) alignment(0)
  cspid(wln)
Symbol(Standard Procedure Symbol) id(writestring)
  type(Void)
    size(0) alignment(0)
  cspid(wrs)

