
Token: Code=293  Line= 12  Col= 8    Name= PROGRAM      Spelling= 'program'
Token: Code=300  Line= 12  Col= 17   Name= ID           Spelling= 'p019_000'
Token: Code=265  Line= 12  Col= 18   Name= SEMICOLON    Spelling= ';'
#05 program_parameters -> EMPTY
#02 program_head -> program ID(p019_000) program_parameters SEMICOLON
L00001

L00002

L00003

#10 variable_declarations -> EMPTY
Token: Code=286  Line= 13  Col= 11   Name= FUNCTION     Spelling= 'function'
#15 subprogram_declarations -> EMPTY
Token: Code=300  Line= 13  Col= 15   Name= ID           Spelling= 'max'
Token: Code=273  Line= 13  Col= 16   Name= LPAREN       Spelling= '('
Token: Code=300  Line= 13  Col= 17   Name= ID           Spelling= 'a'
#08 identifier_list -> ID(a) identifier_list={a}
Token: Code=264  Line= 13  Col= 18   Name= COMMA        Spelling= ','
Token: Code=300  Line= 13  Col= 19   Name= ID           Spelling= 'b'
#09 identifier_list -> identifier_list , ID(b) identifier_list={a,b}
Token: Code=266  Line= 13  Col= 20   Name= COLON        Spelling= ':'
Token: Code=300  Line= 13  Col= 27   Name= ID           Spelling= 'integer'
#14 standard_type -> ID(integer)
Symbol(Type Symbol) id(integer)
  type(Integer)
    size(1) alignment(1)
#12 type -> standard_type
#22 parameter_list -> identifier_list : type
Token: Code=274  Line= 13  Col= 28   Name= RPAREN       Spelling= ')'
#21 subprogram_parameters -> ( parameter_list )
Token: Code=266  Line= 13  Col= 29   Name= COLON        Spelling= ':'
Token: Code=300  Line= 13  Col= 36   Name= ID           Spelling= 'integer'
#14 standard_type -> ID(integer)
Symbol(Type Symbol) id(integer)
  type(Integer)
    size(1) alignment(1)
Token: Code=265  Line= 13  Col= 37   Name= SEMICOLON    Spelling= ';'
#18 subprogram_head -> function ID(max) subprogram_parameters : standard_type ;
L00004

L00005

L00006

#10 variable_declarations -> EMPTY
Token: Code=281  Line= 14  Col= 8    Name= BEGIN        Spelling= 'begin'
Token: Code=287  Line= 15  Col= 7    Name= IF           Spelling= 'if'
Token: Code=300  Line= 15  Col= 9    Name= ID           Spelling= 'a'
Token: Code=271  Line= 15  Col= 10   Name= GRT          Spelling= '>'
#63 factor -> ID(a)
Symbol(Variable Symbol) id(a)
  type(Integer)
    size(1) alignment(1)
  lexicallevel(2) address(5)
          lvi       0         05        
#56 term -> factor
#48 simple_expression -> term
#46 relop -> >
Token: Code=300  Line= 15  Col= 11   Name= ID           Spelling= 'b'
Token: Code=294  Line= 15  Col= 16   Name= THEN         Spelling= 'then'
#63 factor -> ID(b)
Symbol(Variable Symbol) id(b)
  type(Integer)
    size(1) alignment(1)
  lexicallevel(2) address(6)
          lvi       0         06        
#56 term -> factor
#48 simple_expression -> term
#41 expression -> simple_expression relop simple_expression
          lvi       0         05        
          lvi       0         06        
          grt       i                   
Token: Code=300  Line= 15  Col= 20   Name= ID           Spelling= 'max'
Token: Code=262  Line= 15  Col= 22   Name= ASSIGN       Spelling= ':='
#34 variable -> ID(max)
In Print Function

Symbol(Function Symbol) id(max)
  type(Subprogram)
      Return Type
        type(Integer)
          size(1) alignment(1)
      Parameter Types
        type(Integer)
          size(1) alignment(1)
        type(Integer)
          size(1) alignment(1)
  lexicallevel(1) elabel(L00004) splabel(L00005) eplabel(L00006)
          lda       0         00        
Token: Code=300  Line= 15  Col= 23   Name= ID           Spelling= 'a'
Token: Code=284  Line= 15  Col= 28   Name= ELSE         Spelling= 'else'
#63 factor -> ID(a)
Symbol(Variable Symbol) id(a)
  type(Integer)
    size(1) alignment(1)
  lexicallevel(2) address(5)
          lvi       0         05        
#56 term -> factor
#48 simple_expression -> term
#40 expression -> simple_expression
#29 statement -> variable := expression
          lda       0         00        
          lvi       0         05        
          sti       i                   
Token: Code=300  Line= 15  Col= 32   Name= ID           Spelling= 'max'
Token: Code=262  Line= 15  Col= 34   Name= ASSIGN       Spelling= ':='
#34 variable -> ID(max)
In Print Function

Symbol(Function Symbol) id(max)
  type(Subprogram)
      Return Type
        type(Integer)
          size(1) alignment(1)
      Parameter Types
        type(Integer)
          size(1) alignment(1)
        type(Integer)
          size(1) alignment(1)
  lexicallevel(1) elabel(L00004) splabel(L00005) eplabel(L00006)
          lda       0         00        
Token: Code=300  Line= 15  Col= 35   Name= ID           Spelling= 'b'
Token: Code=285  Line= 16  Col= 6    Name= END          Spelling= 'end'
#63 factor -> ID(b)
Symbol(Variable Symbol) id(b)
  type(Integer)
    size(1) alignment(1)
  lexicallevel(2) address(6)
          lvi       0         06        
#56 term -> factor
#48 simple_expression -> term
#40 expression -> simple_expression
#29 statement -> variable := expression
          lda       0         00        
          lvi       0         06        
          sti       i                   
#32 statement -> if expression then statement else statement
L00007

L00008

          lvi       0         05        
          lvi       0         06        
          grt       i                   
          fjp                 L00007    
          lda       0         00        
          lvi       0         05        
          sti       i                   
          ujp                 L00008    
L00007                                  
          lda       0         00        
          lvi       0         06        
          sti       i                   
L00008                                  
#27 statement_list -> statement
          lvi       0         05        
          lvi       0         06        
          grt       i                   
          fjp                 L00007    
          lda       0         00        
          lvi       0         05        
          sti       i                   
          ujp                 L00008    
L00007                                  
          lda       0         00        
          lvi       0         06        
          sti       i                   
L00008                                  
#26 optional_statements -> statement_list
          lvi       0         05        
          lvi       0         06        
          grt       i                   
          fjp                 L00007    
          lda       0         00        
          lvi       0         05        
          sti       i                   
          ujp                 L00008    
L00007                                  
          lda       0         00        
          lvi       0         06        
          sti       i                   
L00008                                  
#24 compound_statement -> BEGIN optional_statements END
          lvi       0         05        
          lvi       0         06        
          grt       i                   
          fjp                 L00007    
          lda       0         00        
          lvi       0         05        
          sti       i                   
          ujp                 L00008    
L00007                                  
          lda       0         00        
          lvi       0         06        
          sti       i                   
L00008                                  
#17 subprogram_declarations -> subprogram_head declarations compound_statement
Locality: lexical level 2

    Symbol(Variable Symbol) id(a)
      type(Integer)
        size(1) alignment(1)
      lexicallevel(2) address(5)
    Symbol(Variable Symbol) id(b)
      type(Integer)
        size(1) alignment(1)
      lexicallevel(2) address(6)

Token: Code=265  Line= 16  Col= 12   Name= SEMICOLON    Spelling= ';'
#16 subprogram_declarations -> subprogram_declarations subprogram_declaration ;
Token: Code=292  Line= 17  Col= 12   Name= PROCEDURE    Spelling= 'procedure'
Token: Code=300  Line= 17  Col= 18   Name= ID           Spelling= 'print'
Token: Code=273  Line= 17  Col= 19   Name= LPAREN       Spelling= '('
Token: Code=300  Line= 17  Col= 20   Name= ID           Spelling= 'a'
#08 identifier_list -> ID(a) identifier_list={a}
Token: Code=264  Line= 17  Col= 21   Name= COMMA        Spelling= ','
Token: Code=300  Line= 17  Col= 22   Name= ID           Spelling= 'b'
#09 identifier_list -> identifier_list , ID(b) identifier_list={a,b}
Token: Code=266  Line= 17  Col= 23   Name= COLON        Spelling= ':'
Token: Code=300  Line= 17  Col= 30   Name= ID           Spelling= 'integer'
#14 standard_type -> ID(integer)
Symbol(Type Symbol) id(integer)
  type(Integer)
    size(1) alignment(1)
#12 type -> standard_type
#22 parameter_list -> identifier_list : type
Token: Code=274  Line= 17  Col= 31   Name= RPAREN       Spelling= ')'
#21 subprogram_parameters -> ( parameter_list )
Token: Code=265  Line= 17  Col= 32   Name= SEMICOLON    Spelling= ';'
#19 subprogram_head -> procedure ID(print) subprogram_parameters ;
L00009

L00010

L00011

#10 variable_declarations -> EMPTY
Token: Code=281  Line= 18  Col= 8    Name= BEGIN        Spelling= 'begin'
Token: Code=300  Line= 19  Col= 12   Name= ID           Spelling= 'writeln'
Token: Code=273  Line= 19  Col= 13   Name= LPAREN       Spelling= '('
Token: Code=303  Line= 19  Col= 30   Name= CHRLIT       Spelling= ''The maximum of ''
#70 factor -> CHRLIT('The maximum of ')
          ldc       s         'The maximum of '
#56 term -> factor
Token: Code=264  Line= 19  Col= 31   Name= COMMA        Spelling= ','
#48 simple_expression -> term
#40 expression -> simple_expression
#38 expression_list -> expression
Token: Code=300  Line= 19  Col= 32   Name= ID           Spelling= 'a'
Token: Code=264  Line= 19  Col= 33   Name= COMMA        Spelling= ','
#63 factor -> ID(a)
Symbol(Variable Symbol) id(a)
  type(Integer)
    size(1) alignment(1)
  lexicallevel(2) address(5)
          lvi       0         05        
#56 term -> factor
#48 simple_expression -> term
#40 expression -> simple_expression
#39 expression_list -> expression_list , expression
Token: Code=303  Line= 19  Col= 40   Name= CHRLIT       Spelling= '' and ''
#70 factor -> CHRLIT(' and ')
          ldc       s         ' and '   
#56 term -> factor
Token: Code=264  Line= 19  Col= 41   Name= COMMA        Spelling= ','
#48 simple_expression -> term
#40 expression -> simple_expression
#39 expression_list -> expression_list , expression
Token: Code=300  Line= 19  Col= 42   Name= ID           Spelling= 'b'
Token: Code=264  Line= 19  Col= 43   Name= COMMA        Spelling= ','
#63 factor -> ID(b)
Symbol(Variable Symbol) id(b)
  type(Integer)
    size(1) alignment(1)
  lexicallevel(2) address(6)
          lvi       0         06        
#56 term -> factor
#48 simple_expression -> term
#40 expression -> simple_expression
#39 expression_list -> expression_list , expression
Token: Code=303  Line= 19  Col= 49   Name= CHRLIT       Spelling= '' is ''
#70 factor -> CHRLIT(' is ')
          ldc       s         ' is '    
#56 term -> factor
Token: Code=264  Line= 19  Col= 50   Name= COMMA        Spelling= ','
#48 simple_expression -> term
#40 expression -> simple_expression
#39 expression_list -> expression_list , expression
Token: Code=300  Line= 19  Col= 53   Name= ID           Spelling= 'max'
Token: Code=273  Line= 19  Col= 54   Name= LPAREN       Spelling= '('
Token: Code=300  Line= 19  Col= 55   Name= ID           Spelling= 'a'
Token: Code=264  Line= 19  Col= 56   Name= COMMA        Spelling= ','
#63 factor -> ID(a)
Symbol(Variable Symbol) id(a)
  type(Integer)
    size(1) alignment(1)
  lexicallevel(2) address(5)
          lvi       0         05        
#56 term -> factor
#48 simple_expression -> term
#40 expression -> simple_expression
#38 expression_list -> expression
Token: Code=300  Line= 19  Col= 57   Name= ID           Spelling= 'b'
Token: Code=274  Line= 19  Col= 58   Name= RPAREN       Spelling= ')'
#63 factor -> ID(b)
Symbol(Variable Symbol) id(b)
  type(Integer)
    size(1) alignment(1)
  lexicallevel(2) address(6)
          lvi       0         06        
#56 term -> factor
#48 simple_expression -> term
#40 expression -> simple_expression
#39 expression_list -> expression_list , expression
#65 factor -> ID(max) LPAREN expression_list RPAREN
          mst       1                   
          lvi       0         05        
          lvi       0         06        
          cup       2         L00004    
#56 term -> factor
Token: Code=274  Line= 19  Col= 59   Name= RPAREN       Spelling= ')'
#48 simple_expression -> term
#40 expression -> simple_expression
#39 expression_list -> expression_list , expression
#37 ID(writeln) ( expression_list )
          csp                 wln       
#30 statement -> procedure_statement
#27 statement_list -> statement
          ldc       s         'The maximum of '
          lvi       0         05        
          ldc       s         ' and '   
          lvi       0         06        
          ldc       s         ' is '    
          mst       1                   
          lvi       0         05        
          lvi       0         06        
          cup       2         L00004    
          csp                 wln       
Token: Code=285  Line= 20  Col= 6    Name= END          Spelling= 'end'
#26 optional_statements -> statement_list
          ldc       s         'The maximum of '
          lvi       0         05        
          ldc       s         ' and '   
          lvi       0         06        
          ldc       s         ' is '    
          mst       1                   
          lvi       0         05        
          lvi       0         06        
          cup       2         L00004    
          csp                 wln       
#24 compound_statement -> BEGIN optional_statements END
          ldc       s         'The maximum of '
          lvi       0         05        
          ldc       s         ' and '   
          lvi       0         06        
          ldc       s         ' is '    
          mst       1                   
          lvi       0         05        
          lvi       0         06        
          cup       2         L00004    
          csp                 wln       
#17 subprogram_declarations -> subprogram_head declarations compound_statement
Locality: lexical level 2

    Symbol(Variable Symbol) id(a)
      type(Integer)
        size(1) alignment(1)
      lexicallevel(2) address(5)
    Symbol(Variable Symbol) id(b)
      type(Integer)
        size(1) alignment(1)
      lexicallevel(2) address(6)

Token: Code=265  Line= 20  Col= 14   Name= SEMICOLON    Spelling= ';'
#16 subprogram_declarations -> subprogram_declarations subprogram_declaration ;
Token: Code=281  Line= 21  Col= 6    Name= BEGIN        Spelling= 'begin'
#03 program_declarations -> declarations subprogram_declarations
Token: Code=300  Line= 22  Col= 8    Name= ID           Spelling= 'print'
Token: Code=273  Line= 22  Col= 9    Name= LPAREN       Spelling= '('
Token: Code=301  Line= 22  Col= 10   Name= INTLIT       Spelling= '2'
#68 factor -> INTLIT(2)
          ldc       i         2         
#56 term -> factor
Token: Code=264  Line= 22  Col= 11   Name= COMMA        Spelling= ','
#48 simple_expression -> term
#40 expression -> simple_expression
#38 expression_list -> expression
Token: Code=301  Line= 22  Col= 12   Name= INTLIT       Spelling= '3'
#68 factor -> INTLIT(3)
          ldc       i         3         
#56 term -> factor
Token: Code=274  Line= 22  Col= 13   Name= RPAREN       Spelling= ')'
#48 simple_expression -> term
#40 expression -> simple_expression
#39 expression_list -> expression_list , expression
#37 ID(print) ( expression_list )
          mst       0                   
          ldc       i         2         
          ldc       i         3         
          cup       2         L00009    
#30 statement -> procedure_statement
#27 statement_list -> statement
          mst       0                   
          ldc       i         2         
          ldc       i         3         
          cup       2         L00009    
Token: Code=285  Line= 23  Col= 4    Name= END          Spelling= 'end'
#26 optional_statements -> statement_list
          mst       0                   
          ldc       i         2         
          ldc       i         3         
          cup       2         L00009    
#24 compound_statement -> BEGIN optional_statements END
          mst       0                   
          ldc       i         2         
          ldc       i         3         
          cup       2         L00009    
Token: Code=263  Line= 23  Col= 15   Name= PERIOD       Spelling= '.'
#04 program_body -> compound_statement PERIOD
#01 program -> program_head program_declarations program_body
Locality: lexical level 1

In Print Function

  Symbol(Function Symbol) id(max)
    type(Subprogram)
        Return Type
          type(Integer)
            size(1) alignment(1)
        Parameter Types
          type(Integer)
            size(1) alignment(1)
          type(Integer)
            size(1) alignment(1)
    lexicallevel(1) elabel(L00004) splabel(L00005) eplabel(L00006)
In Print Function

  Symbol(Procedure Symbol) id(print)
    type(Subprogram)
        Return Type
          type(Void)
            size(0) alignment(0)
        Parameter Types
          type(Integer)
            size(1) alignment(1)
          type(Integer)
            size(1) alignment(1)
    lexicallevel(1) elabel(L00009) splabel(L00010) eplabel(L00011)

Locality: lexical level 0

Symbol(Standard Function Symbol) id(abs)
  type(Void)
    size(0) alignment(0)
  cspid(abs)
Symbol(Type Symbol) id(boolean)
  type(Boolean)
    size(1) alignment(1)
Symbol(Type Symbol) id(char)
  type(Character)
    size(1) alignment(1)
Symbol(Standard Function Symbol) id(chr)
  type(Void)
    size(0) alignment(0)
  cspid(chr)
Symbol(Constant Symbol) id(false)
  type(Boolean)
    size(1) alignment(1)
  Constant value(0)
    type(Boolean)
      size(1) alignment(1)
Symbol(Type Symbol) id(integer)
  type(Integer)
    size(1) alignment(1)
Symbol(Standard Function Symbol) id(ord)
  type(Void)
    size(0) alignment(0)
  cspid(ord)
In Print Function

Symbol(Procedure Symbol) id(p019_000)
  type(Subprogram)
      Return Type
        type(Void)
          size(0) alignment(0)
      Parameter Types
  lexicallevel(0) elabel(L00001) splabel(L00002) eplabel(L00003)
Symbol(Standard Function Symbol) id(pred)
  type(Void)
    size(0) alignment(0)
  cspid(dec)
Symbol(Standard Procedure Symbol) id(readchar)
  type(Void)
    size(0) alignment(0)
  cspid(rdc)
Symbol(Standard Procedure Symbol) id(readinteger)
  type(Void)
    size(0) alignment(0)
  cspid(rdi)
Symbol(Standard Procedure Symbol) id(readln)
  type(Void)
    size(0) alignment(0)
  cspid(rln)
Symbol(Standard Procedure Symbol) id(readreal)
  type(Void)
    size(0) alignment(0)
  cspid(rdr)
Symbol(Standard Procedure Symbol) id(readstring)
  type(Void)
    size(0) alignment(0)
  cspid(rds)
Symbol(Type Symbol) id(real)
  type(Real)
    size(1) alignment(1)
Symbol(Standard Function Symbol) id(round)
  type(Void)
    size(0) alignment(0)
  cspid(rnd)
Symbol(Standard Function Symbol) id(sqrt)
  type(Void)
    size(0) alignment(0)
  cspid(sqt)
Symbol(Standard Function Symbol) id(succ)
  type(Void)
    size(0) alignment(0)
  cspid(inc)
Symbol(Constant Symbol) id(true)
  type(Boolean)
    size(1) alignment(1)
  Constant value(1)
    type(Boolean)
      size(1) alignment(1)
Symbol(Standard Function Symbol) id(trunc)
  type(Void)
    size(0) alignment(0)
  cspid(trc)
Symbol(Standard Procedure Symbol) id(writeboolean)
  type(Void)
    size(0) alignment(0)
  cspid(wrb)
Symbol(Standard Procedure Symbol) id(writechar)
  type(Void)
    size(0) alignment(0)
  cspid(wrc)
Symbol(Standard Procedure Symbol) id(writeexponential)
  type(Void)
    size(0) alignment(0)
  cspid(wre)
Symbol(Standard Procedure Symbol) id(writefixed)
  type(Void)
    size(0) alignment(0)
  cspid(wrf)
Symbol(Standard Procedure Symbol) id(writeinteger)
  type(Void)
    size(0) alignment(0)
  cspid(wri)
Symbol(Standard Procedure Symbol) id(writeln)
  type(Void)
    size(0) alignment(0)
  cspid(wln)
Symbol(Standard Procedure Symbol) id(writestring)
  type(Void)
    size(0) alignment(0)
  cspid(wrs)

