
Token: Code=293  Line= 12  Col= 8    Name= PROGRAM      Spelling= 'program'
Token: Code=300  Line= 12  Col= 17   Name= ID           Spelling= 'p053_000'
Token: Code=265  Line= 12  Col= 18   Name= SEMICOLON    Spelling= ';'
#05 program_parameters -> EMPTY
#02 program_head -> program ID(p053_000) program_parameters SEMICOLON
L00001

L00002

L00003

#10 variable_declarations -> EMPTY
Token: Code=297  Line= 13  Col= 6    Name= VAR          Spelling= 'var'
Token: Code=300  Line= 13  Col= 8    Name= ID           Spelling= 'i'
#08 identifier_list -> ID(i) identifier_list={i}
Token: Code=264  Line= 13  Col= 9    Name= COMMA        Spelling= ','
Token: Code=300  Line= 13  Col= 10   Name= ID           Spelling= 'j'
#09 identifier_list -> identifier_list , ID(j) identifier_list={i,j}
Token: Code=264  Line= 13  Col= 11   Name= COMMA        Spelling= ','
Token: Code=300  Line= 13  Col= 12   Name= ID           Spelling= 'k'
#09 identifier_list -> identifier_list , ID(k) identifier_list={i,j,k}
Token: Code=266  Line= 13  Col= 13   Name= COLON        Spelling= ':'
Token: Code=300  Line= 13  Col= 20   Name= ID           Spelling= 'integer'
#14 standard_type -> ID(integer)
Symbol(Type Symbol) id(integer)
  type(Integer)
    size(1) alignment(1)
#12 type -> standard_type
Token: Code=265  Line= 13  Col= 21   Name= SEMICOLON    Spelling= ';'
#11 variable_declarations -> variable_declarations VAR identifier_list  {i, j, k} : type SEMICOLON
Token: Code=297  Line= 14  Col= 6    Name= VAR          Spelling= 'var'
Token: Code=300  Line= 14  Col= 8    Name= ID           Spelling= 'b'
#08 identifier_list -> ID(b) identifier_list={b}
Token: Code=264  Line= 14  Col= 9    Name= COMMA        Spelling= ','
Token: Code=300  Line= 14  Col= 10   Name= ID           Spelling= 'c'
#09 identifier_list -> identifier_list , ID(c) identifier_list={b,c}
Token: Code=264  Line= 14  Col= 11   Name= COMMA        Spelling= ','
Token: Code=300  Line= 14  Col= 12   Name= ID           Spelling= 'd'
#09 identifier_list -> identifier_list , ID(d) identifier_list={b,c,d}
Token: Code=266  Line= 14  Col= 13   Name= COLON        Spelling= ':'
Token: Code=300  Line= 14  Col= 20   Name= ID           Spelling= 'boolean'
#14 standard_type -> ID(boolean)
Symbol(Type Symbol) id(boolean)
  type(Boolean)
    size(1) alignment(1)
#12 type -> standard_type
Token: Code=265  Line= 14  Col= 21   Name= SEMICOLON    Spelling= ';'
#11 variable_declarations -> variable_declarations VAR identifier_list  {b, c, d} : type SEMICOLON
Token: Code=281  Line= 15  Col= 6    Name= BEGIN        Spelling= 'begin'
#15 subprogram_declarations -> EMPTY
#03 program_declarations -> declarations subprogram_declarations
Token: Code=300  Line= 16  Col= 4    Name= ID           Spelling= 'i'
Token: Code=262  Line= 16  Col= 6    Name= ASSIGN       Spelling= ':='
#34 variable -> ID(i)
Symbol(Variable Symbol) id(i)
  type(Integer)
    size(1) alignment(1)
  lexicallevel(1) address(5)
          lda       0         05        
Token: Code=301  Line= 16  Col= 7    Name= INTLIT       Spelling= '1'
#68 factor -> INTLIT(1)
          ldc       i         1         
#56 term -> factor
Token: Code=265  Line= 16  Col= 8    Name= SEMICOLON    Spelling= ';'
#48 simple_expression -> term
#40 expression -> simple_expression
#29 statement -> variable := expression
          lda       0         05        
          ldc       i         1         
          sti       i                   
#27 statement_list -> statement
          lda       0         05        
          ldc       i         1         
          sti       i                   
Token: Code=300  Line= 16  Col= 9    Name= ID           Spelling= 'j'
Token: Code=262  Line= 16  Col= 11   Name= ASSIGN       Spelling= ':='
#34 variable -> ID(j)
Symbol(Variable Symbol) id(j)
  type(Integer)
    size(1) alignment(1)
  lexicallevel(1) address(6)
          lda       0         06        
Token: Code=301  Line= 16  Col= 12   Name= INTLIT       Spelling= '2'
#68 factor -> INTLIT(2)
          ldc       i         2         
#56 term -> factor
Token: Code=265  Line= 16  Col= 13   Name= SEMICOLON    Spelling= ';'
#48 simple_expression -> term
#40 expression -> simple_expression
#29 statement -> variable := expression
          lda       0         06        
          ldc       i         2         
          sti       i                   
#28 statement_list -> statement_list SEMICOLON statement
          lda       0         05        
          ldc       i         1         
          sti       i                   
          lda       0         06        
          ldc       i         2         
          sti       i                   
Token: Code=300  Line= 16  Col= 14   Name= ID           Spelling= 'k'
Token: Code=262  Line= 16  Col= 16   Name= ASSIGN       Spelling= ':='
#34 variable -> ID(k)
Symbol(Variable Symbol) id(k)
  type(Integer)
    size(1) alignment(1)
  lexicallevel(1) address(7)
          lda       0         07        
Token: Code=301  Line= 16  Col= 17   Name= INTLIT       Spelling= '3'
#68 factor -> INTLIT(3)
          ldc       i         3         
#56 term -> factor
Token: Code=265  Line= 16  Col= 18   Name= SEMICOLON    Spelling= ';'
#48 simple_expression -> term
#40 expression -> simple_expression
#29 statement -> variable := expression
          lda       0         07        
          ldc       i         3         
          sti       i                   
#28 statement_list -> statement_list SEMICOLON statement
          lda       0         05        
          ldc       i         1         
          sti       i                   
          lda       0         06        
          ldc       i         2         
          sti       i                   
          lda       0         07        
          ldc       i         3         
          sti       i                   
Token: Code=300  Line= 17  Col= 4    Name= ID           Spelling= 'b'
Token: Code=262  Line= 17  Col= 6    Name= ASSIGN       Spelling= ':='
#34 variable -> ID(b)
Symbol(Variable Symbol) id(b)
  type(Boolean)
    size(1) alignment(1)
  lexicallevel(1) address(8)
          lda       0         08        
Token: Code=300  Line= 17  Col= 11   Name= ID           Spelling= 'false'
Token: Code=265  Line= 17  Col= 12   Name= SEMICOLON    Spelling= ';'
#63 factor -> ID(false)
Symbol(Constant Symbol) id(false)
  type(Boolean)
    size(1) alignment(1)
  Constant value(0)
    type(Boolean)
      size(1) alignment(1)
          ldc       b         0         
#56 term -> factor
#48 simple_expression -> term
#40 expression -> simple_expression
#29 statement -> variable := expression
          lda       0         08        
          ldc       b         0         
          sti       b                   
#28 statement_list -> statement_list SEMICOLON statement
          lda       0         05        
          ldc       i         1         
          sti       i                   
          lda       0         06        
          ldc       i         2         
          sti       i                   
          lda       0         07        
          ldc       i         3         
          sti       i                   
          lda       0         08        
          ldc       b         0         
          sti       b                   
Token: Code=300  Line= 17  Col= 13   Name= ID           Spelling= 'c'
Token: Code=262  Line= 17  Col= 15   Name= ASSIGN       Spelling= ':='
#34 variable -> ID(c)
Symbol(Variable Symbol) id(c)
  type(Boolean)
    size(1) alignment(1)
  lexicallevel(1) address(9)
          lda       0         09        
Token: Code=300  Line= 17  Col= 19   Name= ID           Spelling= 'true'
Token: Code=265  Line= 17  Col= 20   Name= SEMICOLON    Spelling= ';'
#63 factor -> ID(true)
Symbol(Constant Symbol) id(true)
  type(Boolean)
    size(1) alignment(1)
  Constant value(1)
    type(Boolean)
      size(1) alignment(1)
          ldc       b         1         
#56 term -> factor
#48 simple_expression -> term
#40 expression -> simple_expression
#29 statement -> variable := expression
          lda       0         09        
          ldc       b         1         
          sti       b                   
#28 statement_list -> statement_list SEMICOLON statement
          lda       0         05        
          ldc       i         1         
          sti       i                   
          lda       0         06        
          ldc       i         2         
          sti       i                   
          lda       0         07        
          ldc       i         3         
          sti       i                   
          lda       0         08        
          ldc       b         0         
          sti       b                   
          lda       0         09        
          ldc       b         1         
          sti       b                   
Token: Code=300  Line= 17  Col= 21   Name= ID           Spelling= 'd'
Token: Code=262  Line= 17  Col= 23   Name= ASSIGN       Spelling= ':='
#34 variable -> ID(d)
Symbol(Variable Symbol) id(d)
  type(Boolean)
    size(1) alignment(1)
  lexicallevel(1) address(10)
          lda       0         010       
Token: Code=300  Line= 17  Col= 28   Name= ID           Spelling= 'false'
Token: Code=265  Line= 17  Col= 29   Name= SEMICOLON    Spelling= ';'
#63 factor -> ID(false)
Symbol(Constant Symbol) id(false)
  type(Boolean)
    size(1) alignment(1)
  Constant value(0)
    type(Boolean)
      size(1) alignment(1)
          ldc       b         0         
#56 term -> factor
#48 simple_expression -> term
#40 expression -> simple_expression
#29 statement -> variable := expression
          lda       0         010       
          ldc       b         0         
          sti       b                   
#28 statement_list -> statement_list SEMICOLON statement
          lda       0         05        
          ldc       i         1         
          sti       i                   
          lda       0         06        
          ldc       i         2         
          sti       i                   
          lda       0         07        
          ldc       i         3         
          sti       i                   
          lda       0         08        
          ldc       b         0         
          sti       b                   
          lda       0         09        
          ldc       b         1         
          sti       b                   
          lda       0         010       
          ldc       b         0         
          sti       b                   
Token: Code=300  Line= 18  Col= 4    Name= ID           Spelling= 'i'
Token: Code=262  Line= 18  Col= 6    Name= ASSIGN       Spelling= ':='
#34 variable -> ID(i)
Symbol(Variable Symbol) id(i)
  type(Integer)
    size(1) alignment(1)
  lexicallevel(1) address(5)
          lda       0         05        
Token: Code=258  Line= 18  Col= 7    Name= PLUS         Spelling= '+'
#51 sign -> +
Token: Code=300  Line= 18  Col= 8    Name= ID           Spelling= 'j'
Token: Code=265  Line= 18  Col= 9    Name= SEMICOLON    Spelling= ';'
#63 factor -> ID(j)
Symbol(Variable Symbol) id(j)
  type(Integer)
    size(1) alignment(1)
  lexicallevel(1) address(6)
          lvi       0         06        
#56 term -> factor
#49 simple_expression -> sign term
#40 expression -> simple_expression
#29 statement -> variable := expression
          lda       0         05        
          lvi       0         06        
          sti       i                   
#28 statement_list -> statement_list SEMICOLON statement
          lda       0         05        
          ldc       i         1         
          sti       i                   
          lda       0         06        
          ldc       i         2         
          sti       i                   
          lda       0         07        
          ldc       i         3         
          sti       i                   
          lda       0         08        
          ldc       b         0         
          sti       b                   
          lda       0         09        
          ldc       b         1         
          sti       b                   
          lda       0         010       
          ldc       b         0         
          sti       b                   
          lda       0         05        
          lvi       0         06        
          sti       i                   
Token: Code=300  Line= 19  Col= 4    Name= ID           Spelling= 'i'
Token: Code=262  Line= 19  Col= 6    Name= ASSIGN       Spelling= ':='
#34 variable -> ID(i)
Symbol(Variable Symbol) id(i)
  type(Integer)
    size(1) alignment(1)
  lexicallevel(1) address(5)
          lda       0         05        
Token: Code=259  Line= 19  Col= 7    Name= MINUS        Spelling= '-'
#52 sign -> -
Token: Code=300  Line= 19  Col= 8    Name= ID           Spelling= 'j'
Token: Code=265  Line= 19  Col= 9    Name= SEMICOLON    Spelling= ';'
#63 factor -> ID(j)
Symbol(Variable Symbol) id(j)
  type(Integer)
    size(1) alignment(1)
  lexicallevel(1) address(6)
          lvi       0         06        
#56 term -> factor
#49 simple_expression -> sign term
          lvi       0         06        
          ngi                           
#40 expression -> simple_expression
#29 statement -> variable := expression
          lda       0         05        
          lvi       0         06        
          ngi                           
          sti       i                   
#28 statement_list -> statement_list SEMICOLON statement
          lda       0         05        
          ldc       i         1         
          sti       i                   
          lda       0         06        
          ldc       i         2         
          sti       i                   
          lda       0         07        
          ldc       i         3         
          sti       i                   
          lda       0         08        
          ldc       b         0         
          sti       b                   
          lda       0         09        
          ldc       b         1         
          sti       b                   
          lda       0         010       
          ldc       b         0         
          sti       b                   
          lda       0         05        
          lvi       0         06        
          sti       i                   
          lda       0         05        
          lvi       0         06        
          ngi                           
          sti       i                   
Token: Code=300  Line= 20  Col= 4    Name= ID           Spelling= 'i'
Token: Code=262  Line= 20  Col= 6    Name= ASSIGN       Spelling= ':='
#34 variable -> ID(i)
Symbol(Variable Symbol) id(i)
  type(Integer)
    size(1) alignment(1)
  lexicallevel(1) address(5)
          lda       0         05        
Token: Code=300  Line= 20  Col= 7    Name= ID           Spelling= 'j'
Token: Code=258  Line= 20  Col= 8    Name= PLUS         Spelling= '+'
#63 factor -> ID(j)
Symbol(Variable Symbol) id(j)
  type(Integer)
    size(1) alignment(1)
  lexicallevel(1) address(6)
          lvi       0         06        
#56 term -> factor
#48 simple_expression -> term
#53 addop -> +
Token: Code=300  Line= 20  Col= 9    Name= ID           Spelling= 'k'
Token: Code=265  Line= 20  Col= 10   Name= SEMICOLON    Spelling= ';'
#63 factor -> ID(k)
Symbol(Variable Symbol) id(k)
  type(Integer)
    size(1) alignment(1)
  lexicallevel(1) address(7)
          lvi       0         07        
#56 term -> factor
#50 simple_expression -> simple_expression addop term
          lvi       0         06        
          lvi       0         07        
          adi                           
#40 expression -> simple_expression
#29 statement -> variable := expression
          lda       0         05        
          lvi       0         06        
          lvi       0         07        
          adi                           
          sti       i                   
#28 statement_list -> statement_list SEMICOLON statement
          lda       0         05        
          ldc       i         1         
          sti       i                   
          lda       0         06        
          ldc       i         2         
          sti       i                   
          lda       0         07        
          ldc       i         3         
          sti       i                   
          lda       0         08        
          ldc       b         0         
          sti       b                   
          lda       0         09        
          ldc       b         1         
          sti       b                   
          lda       0         010       
          ldc       b         0         
          sti       b                   
          lda       0         05        
          lvi       0         06        
          sti       i                   
          lda       0         05        
          lvi       0         06        
          ngi                           
          sti       i                   
          lda       0         05        
          lvi       0         06        
          lvi       0         07        
          adi                           
          sti       i                   
Token: Code=300  Line= 21  Col= 4    Name= ID           Spelling= 'i'
Token: Code=262  Line= 21  Col= 6    Name= ASSIGN       Spelling= ':='
#34 variable -> ID(i)
Symbol(Variable Symbol) id(i)
  type(Integer)
    size(1) alignment(1)
  lexicallevel(1) address(5)
          lda       0         05        
Token: Code=300  Line= 21  Col= 7    Name= ID           Spelling= 'j'
Token: Code=259  Line= 21  Col= 8    Name= MINUS        Spelling= '-'
#63 factor -> ID(j)
Symbol(Variable Symbol) id(j)
  type(Integer)
    size(1) alignment(1)
  lexicallevel(1) address(6)
          lvi       0         06        
#56 term -> factor
#48 simple_expression -> term
#54 addop -> -
Token: Code=300  Line= 21  Col= 9    Name= ID           Spelling= 'k'
Token: Code=265  Line= 21  Col= 10   Name= SEMICOLON    Spelling= ';'
#63 factor -> ID(k)
Symbol(Variable Symbol) id(k)
  type(Integer)
    size(1) alignment(1)
  lexicallevel(1) address(7)
          lvi       0         07        
#56 term -> factor
#50 simple_expression -> simple_expression addop term
          lvi       0         06        
          lvi       0         07        
          sbi                           
#40 expression -> simple_expression
#29 statement -> variable := expression
          lda       0         05        
          lvi       0         06        
          lvi       0         07        
          sbi                           
          sti       i                   
#28 statement_list -> statement_list SEMICOLON statement
          lda       0         05        
          ldc       i         1         
          sti       i                   
          lda       0         06        
          ldc       i         2         
          sti       i                   
          lda       0         07        
          ldc       i         3         
          sti       i                   
          lda       0         08        
          ldc       b         0         
          sti       b                   
          lda       0         09        
          ldc       b         1         
          sti       b                   
          lda       0         010       
          ldc       b         0         
          sti       b                   
          lda       0         05        
          lvi       0         06        
          sti       i                   
          lda       0         05        
          lvi       0         06        
          ngi                           
          sti       i                   
          lda       0         05        
          lvi       0         06        
          lvi       0         07        
          adi                           
          sti       i                   
          lda       0         05        
          lvi       0         06        
          lvi       0         07        
          sbi                           
          sti       i                   
Token: Code=300  Line= 22  Col= 4    Name= ID           Spelling= 'b'
Token: Code=262  Line= 22  Col= 6    Name= ASSIGN       Spelling= ':='
#34 variable -> ID(b)
Symbol(Variable Symbol) id(b)
  type(Boolean)
    size(1) alignment(1)
  lexicallevel(1) address(8)
          lda       0         08        
Token: Code=300  Line= 22  Col= 7    Name= ID           Spelling= 'c'
Token: Code=291  Line= 22  Col= 10   Name= OR           Spelling= 'or'
#63 factor -> ID(c)
Symbol(Variable Symbol) id(c)
  type(Boolean)
    size(1) alignment(1)
  lexicallevel(1) address(9)
          lvb       0         09        
#56 term -> factor
#48 simple_expression -> term
#55 procedure_statement -> or
Token: Code=300  Line= 22  Col= 12   Name= ID           Spelling= 'd'
Token: Code=285  Line= 23  Col= 4    Name= END          Spelling= 'end'
#63 factor -> ID(d)
Symbol(Variable Symbol) id(d)
  type(Boolean)
    size(1) alignment(1)
  lexicallevel(1) address(10)
          lvb       0         010       
#56 term -> factor
#50 simple_expression -> simple_expression addop term
          lvb       0         09        
          lvb       0         010       
          ior                           
#40 expression -> simple_expression
#29 statement -> variable := expression
          lda       0         08        
          lvb       0         09        
          lvb       0         010       
          ior                           
          sti       b                   
#28 statement_list -> statement_list SEMICOLON statement
          lda       0         05        
          ldc       i         1         
          sti       i                   
          lda       0         06        
          ldc       i         2         
          sti       i                   
          lda       0         07        
          ldc       i         3         
          sti       i                   
          lda       0         08        
          ldc       b         0         
          sti       b                   
          lda       0         09        
          ldc       b         1         
          sti       b                   
          lda       0         010       
          ldc       b         0         
          sti       b                   
          lda       0         05        
          lvi       0         06        
          sti       i                   
          lda       0         05        
          lvi       0         06        
          ngi                           
          sti       i                   
          lda       0         05        
          lvi       0         06        
          lvi       0         07        
          adi                           
          sti       i                   
          lda       0         05        
          lvi       0         06        
          lvi       0         07        
          sbi                           
          sti       i                   
          lda       0         08        
          lvb       0         09        
          lvb       0         010       
          ior                           
          sti       b                   
#26 optional_statements -> statement_list
          lda       0         05        
          ldc       i         1         
          sti       i                   
          lda       0         06        
          ldc       i         2         
          sti       i                   
          lda       0         07        
          ldc       i         3         
          sti       i                   
          lda       0         08        
          ldc       b         0         
          sti       b                   
          lda       0         09        
          ldc       b         1         
          sti       b                   
          lda       0         010       
          ldc       b         0         
          sti       b                   
          lda       0         05        
          lvi       0         06        
          sti       i                   
          lda       0         05        
          lvi       0         06        
          ngi                           
          sti       i                   
          lda       0         05        
          lvi       0         06        
          lvi       0         07        
          adi                           
          sti       i                   
          lda       0         05        
          lvi       0         06        
          lvi       0         07        
          sbi                           
          sti       i                   
          lda       0         08        
          lvb       0         09        
          lvb       0         010       
          ior                           
          sti       b                   
#24 compound_statement -> BEGIN optional_statements END
          lda       0         05        
          ldc       i         1         
          sti       i                   
          lda       0         06        
          ldc       i         2         
          sti       i                   
          lda       0         07        
          ldc       i         3         
          sti       i                   
          lda       0         08        
          ldc       b         0         
          sti       b                   
          lda       0         09        
          ldc       b         1         
          sti       b                   
          lda       0         010       
          ldc       b         0         
          sti       b                   
          lda       0         05        
          lvi       0         06        
          sti       i                   
          lda       0         05        
          lvi       0         06        
          ngi                           
          sti       i                   
          lda       0         05        
          lvi       0         06        
          lvi       0         07        
          adi                           
          sti       i                   
          lda       0         05        
          lvi       0         06        
          lvi       0         07        
          sbi                           
          sti       i                   
          lda       0         08        
          lvb       0         09        
          lvb       0         010       
          ior                           
          sti       b                   
Token: Code=263  Line= 23  Col= 15   Name= PERIOD       Spelling= '.'
#04 program_body -> compound_statement PERIOD
#01 program -> program_head program_declarations program_body
Locality: lexical level 1

  Symbol(Variable Symbol) id(b)
    type(Boolean)
      size(1) alignment(1)
    lexicallevel(1) address(8)
  Symbol(Variable Symbol) id(c)
    type(Boolean)
      size(1) alignment(1)
    lexicallevel(1) address(9)
  Symbol(Variable Symbol) id(d)
    type(Boolean)
      size(1) alignment(1)
    lexicallevel(1) address(10)
  Symbol(Variable Symbol) id(i)
    type(Integer)
      size(1) alignment(1)
    lexicallevel(1) address(5)
  Symbol(Variable Symbol) id(j)
    type(Integer)
      size(1) alignment(1)
    lexicallevel(1) address(6)
  Symbol(Variable Symbol) id(k)
    type(Integer)
      size(1) alignment(1)
    lexicallevel(1) address(7)

Locality: lexical level 0

Symbol(Standard Function Symbol) id(abs)
  type(Void)
    size(0) alignment(0)
  cspid(abs)
Symbol(Type Symbol) id(boolean)
  type(Boolean)
    size(1) alignment(1)
Symbol(Type Symbol) id(char)
  type(Character)
    size(1) alignment(1)
Symbol(Standard Function Symbol) id(chr)
  type(Void)
    size(0) alignment(0)
  cspid(chr)
Symbol(Constant Symbol) id(false)
  type(Boolean)
    size(1) alignment(1)
  Constant value(0)
    type(Boolean)
      size(1) alignment(1)
Symbol(Type Symbol) id(integer)
  type(Integer)
    size(1) alignment(1)
Symbol(Standard Function Symbol) id(ord)
  type(Void)
    size(0) alignment(0)
  cspid(ord)
In Print Function

Symbol(Procedure Symbol) id(p053_000)
  type(Subprogram)
      Return Type
        type(Void)
          size(0) alignment(0)
      Parameter Types
  lexicallevel(0) elabel(L00001) splabel(L00002) eplabel(L00003)
Symbol(Standard Function Symbol) id(pred)
  type(Void)
    size(0) alignment(0)
  cspid(dec)
Symbol(Standard Procedure Symbol) id(readchar)
  type(Void)
    size(0) alignment(0)
  cspid(rdc)
Symbol(Standard Procedure Symbol) id(readinteger)
  type(Void)
    size(0) alignment(0)
  cspid(rdi)
Symbol(Standard Procedure Symbol) id(readln)
  type(Void)
    size(0) alignment(0)
  cspid(rln)
Symbol(Standard Procedure Symbol) id(readreal)
  type(Void)
    size(0) alignment(0)
  cspid(rdr)
Symbol(Standard Procedure Symbol) id(readstring)
  type(Void)
    size(0) alignment(0)
  cspid(rds)
Symbol(Type Symbol) id(real)
  type(Real)
    size(1) alignment(1)
Symbol(Standard Function Symbol) id(round)
  type(Void)
    size(0) alignment(0)
  cspid(rnd)
Symbol(Standard Function Symbol) id(sqrt)
  type(Void)
    size(0) alignment(0)
  cspid(sqt)
Symbol(Standard Function Symbol) id(succ)
  type(Void)
    size(0) alignment(0)
  cspid(inc)
Symbol(Constant Symbol) id(true)
  type(Boolean)
    size(1) alignment(1)
  Constant value(1)
    type(Boolean)
      size(1) alignment(1)
Symbol(Standard Function Symbol) id(trunc)
  type(Void)
    size(0) alignment(0)
  cspid(trc)
Symbol(Standard Procedure Symbol) id(writeboolean)
  type(Void)
    size(0) alignment(0)
  cspid(wrb)
Symbol(Standard Procedure Symbol) id(writechar)
  type(Void)
    size(0) alignment(0)
  cspid(wrc)
Symbol(Standard Procedure Symbol) id(writeexponential)
  type(Void)
    size(0) alignment(0)
  cspid(wre)
Symbol(Standard Procedure Symbol) id(writefixed)
  type(Void)
    size(0) alignment(0)
  cspid(wrf)
Symbol(Standard Procedure Symbol) id(writeinteger)
  type(Void)
    size(0) alignment(0)
  cspid(wri)
Symbol(Standard Procedure Symbol) id(writeln)
  type(Void)
    size(0) alignment(0)
  cspid(wln)
Symbol(Standard Procedure Symbol) id(writestring)
  type(Void)
    size(0) alignment(0)
  cspid(wrs)

