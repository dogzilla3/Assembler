
Token: Code=293  Line= 12  Col= 8    Name= PROGRAM      Spelling= 'program'
Token: Code=300  Line= 12  Col= 17   Name= ID           Spelling= 'p035_000'
Token: Code=265  Line= 12  Col= 18   Name= SEMICOLON    Spelling= ';'
#05 program_parameters -> EMPTY
#02 program_head -> program ID(p035_000) program_parameters SEMICOLON
L00001

L00002

L00003

#10 variable_declarations -> EMPTY
Token: Code=297  Line= 13  Col= 6    Name= VAR          Spelling= 'var'
Token: Code=300  Line= 13  Col= 8    Name= ID           Spelling= 'a'
#08 identifier_list -> ID(a) identifier_list={a}
Token: Code=266  Line= 13  Col= 9    Name= COLON        Spelling= ':'
Token: Code=280  Line= 13  Col= 14   Name= ARRAY        Spelling= 'array'
Token: Code=275  Line= 13  Col= 15   Name= LBRACKET     Spelling= '['
Token: Code=301  Line= 13  Col= 16   Name= INTLIT       Spelling= '1'
Token: Code=277  Line= 13  Col= 18   Name= RANGE        Spelling= '..'
Token: Code=301  Line= 13  Col= 20   Name= INTLIT       Spelling= '10'
Token: Code=276  Line= 13  Col= 21   Name= RBRACKET     Spelling= ']'
Token: Code=290  Line= 13  Col= 24   Name= OF           Spelling= 'of'
Token: Code=300  Line= 13  Col= 32   Name= ID           Spelling= 'integer'
#14 standard_type -> ID(integer)
Symbol(Type Symbol) id(integer)
  type(Integer)
    size(1) alignment(1)
#13 type -> array [ intlit .. intlit ] of standard_type
Token: Code=265  Line= 13  Col= 33   Name= SEMICOLON    Spelling= ';'
#11 variable_declarations -> variable_declarations VAR identifier_list  {a} : type SEMICOLON
Token: Code=281  Line= 14  Col= 6    Name= BEGIN        Spelling= 'begin'
#15 subprogram_declarations -> EMPTY
#03 program_declarations -> declarations subprogram_declarations
Token: Code=300  Line= 15  Col= 4    Name= ID           Spelling= 'a'
Token: Code=275  Line= 15  Col= 5    Name= LBRACKET     Spelling= '['
Token: Code=301  Line= 15  Col= 6    Name= INTLIT       Spelling= '2'
#68 factor -> INTLIT(2)
          ldc       i         2         
#56 term -> factor
Token: Code=276  Line= 15  Col= 7    Name= RBRACKET     Spelling= ']'
#48 simple_expression -> term
#40 expression -> simple_expression
#35 variable -> ID(a) LPAREN expression RPAREN
          lda       0         05        
          ldc       i         2         
          ldc       i         1         
          sbi                           
          ixa                 1         
Token: Code=262  Line= 15  Col= 9    Name= ASSIGN       Spelling= ':='
Token: Code=301  Line= 15  Col= 11   Name= INTLIT       Spelling= '10'
#68 factor -> INTLIT(10)
          ldc       i         10        
#56 term -> factor
Token: Code=285  Line= 16  Col= 4    Name= END          Spelling= 'end'
#48 simple_expression -> term
#40 expression -> simple_expression
#29 statement -> variable := expression
          lda       0         05        
          ldc       i         2         
          ldc       i         1         
          sbi                           
          ixa                 1         
          ldc       i         10        
          sti       i                   
#27 statement_list -> statement
          lda       0         05        
          ldc       i         2         
          ldc       i         1         
          sbi                           
          ixa                 1         
          ldc       i         10        
          sti       i                   
#26 optional_statements -> statement_list
          lda       0         05        
          ldc       i         2         
          ldc       i         1         
          sbi                           
          ixa                 1         
          ldc       i         10        
          sti       i                   
#24 compound_statement -> BEGIN optional_statements END
          lda       0         05        
          ldc       i         2         
          ldc       i         1         
          sbi                           
          ixa                 1         
          ldc       i         10        
          sti       i                   
Token: Code=263  Line= 16  Col= 15   Name= PERIOD       Spelling= '.'
#04 program_body -> compound_statement PERIOD
#01 program -> program_head program_declarations program_body
Locality: lexical level 1

  Symbol(Variable Symbol) id(a)
    type(Array)
      Size(10)
      Index Type
        type(Range)
          Constant value(1)
            type(Integer)
              size(1) alignment(1)
          Constant value(10)
            type(Integer)
              size(1) alignment(1)
      Element Type
        type(Integer)
          size(1) alignment(1)
    lexicallevel(1) address(5)

Locality: lexical level 0

Symbol(Standard Function Symbol) id(abs)
  type(Void)
    size(0) alignment(0)
  cspid(abs)
Symbol(Type Symbol) id(boolean)
  type(Boolean)
    size(1) alignment(1)
Symbol(Type Symbol) id(char)
  type(Character)
    size(1) alignment(1)
Symbol(Standard Function Symbol) id(chr)
  type(Void)
    size(0) alignment(0)
  cspid(chr)
Symbol(Constant Symbol) id(false)
  type(Boolean)
    size(1) alignment(1)
  Constant value(0)
    type(Boolean)
      size(1) alignment(1)
Symbol(Type Symbol) id(integer)
  type(Integer)
    size(1) alignment(1)
Symbol(Standard Function Symbol) id(ord)
  type(Void)
    size(0) alignment(0)
  cspid(ord)
In Print Function

Symbol(Procedure Symbol) id(p035_000)
  type(Subprogram)
      Return Type
        type(Void)
          size(0) alignment(0)
      Parameter Types
  lexicallevel(0) elabel(L00001) splabel(L00002) eplabel(L00003)
Symbol(Standard Function Symbol) id(pred)
  type(Void)
    size(0) alignment(0)
  cspid(dec)
Symbol(Standard Procedure Symbol) id(readchar)
  type(Void)
    size(0) alignment(0)
  cspid(rdc)
Symbol(Standard Procedure Symbol) id(readinteger)
  type(Void)
    size(0) alignment(0)
  cspid(rdi)
Symbol(Standard Procedure Symbol) id(readln)
  type(Void)
    size(0) alignment(0)
  cspid(rln)
Symbol(Standard Procedure Symbol) id(readreal)
  type(Void)
    size(0) alignment(0)
  cspid(rdr)
Symbol(Standard Procedure Symbol) id(readstring)
  type(Void)
    size(0) alignment(0)
  cspid(rds)
Symbol(Type Symbol) id(real)
  type(Real)
    size(1) alignment(1)
Symbol(Standard Function Symbol) id(round)
  type(Void)
    size(0) alignment(0)
  cspid(rnd)
Symbol(Standard Function Symbol) id(sqrt)
  type(Void)
    size(0) alignment(0)
  cspid(sqt)
Symbol(Standard Function Symbol) id(succ)
  type(Void)
    size(0) alignment(0)
  cspid(inc)
Symbol(Constant Symbol) id(true)
  type(Boolean)
    size(1) alignment(1)
  Constant value(1)
    type(Boolean)
      size(1) alignment(1)
Symbol(Standard Function Symbol) id(trunc)
  type(Void)
    size(0) alignment(0)
  cspid(trc)
Symbol(Standard Procedure Symbol) id(writeboolean)
  type(Void)
    size(0) alignment(0)
  cspid(wrb)
Symbol(Standard Procedure Symbol) id(writechar)
  type(Void)
    size(0) alignment(0)
  cspid(wrc)
Symbol(Standard Procedure Symbol) id(writeexponential)
  type(Void)
    size(0) alignment(0)
  cspid(wre)
Symbol(Standard Procedure Symbol) id(writefixed)
  type(Void)
    size(0) alignment(0)
  cspid(wrf)
Symbol(Standard Procedure Symbol) id(writeinteger)
  type(Void)
    size(0) alignment(0)
  cspid(wri)
Symbol(Standard Procedure Symbol) id(writeln)
  type(Void)
    size(0) alignment(0)
  cspid(wln)
Symbol(Standard Procedure Symbol) id(writestring)
  type(Void)
    size(0) alignment(0)
  cspid(wrs)

