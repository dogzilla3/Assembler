
Token: Code=293  Line= 12  Col= 8    Name= PROGRAM      Spelling= 'program'
Token: Code=300  Line= 12  Col= 15   Name= ID           Spelling= 'p10_01'
Token: Code=265  Line= 12  Col= 16   Name= SEMICOLON    Spelling= ';'
#05 program_parameters -> EMPTY
#02 program_head -> program ID(p10_01) program_parameters SEMICOLON
L00001

L00002

L00003

#10 variable_declarations -> EMPTY
Token: Code=297  Line= 13  Col= 6    Name= VAR          Spelling= 'var'
Token: Code=300  Line= 13  Col= 8    Name= ID           Spelling= 'a'
#08 identifier_list -> ID(a) identifier_list={a}
Token: Code=264  Line= 13  Col= 9    Name= COMMA        Spelling= ','
Token: Code=300  Line= 13  Col= 10   Name= ID           Spelling= 'b'
#09 identifier_list -> identifier_list , ID(b) identifier_list={a,b}
Token: Code=266  Line= 13  Col= 11   Name= COLON        Spelling= ':'
Token: Code=300  Line= 13  Col= 18   Name= ID           Spelling= 'integer'
#14 standard_type -> ID(integer)
Symbol(Type Symbol) id(integer)
  type(Integer)
    size(1) alignment(1)
#12 type -> standard_type
Token: Code=265  Line= 13  Col= 19   Name= SEMICOLON    Spelling= ';'
#11 variable_declarations -> variable_declarations VAR identifier_list  {a, b} : type SEMICOLON
Token: Code=297  Line= 14  Col= 6    Name= VAR          Spelling= 'var'
Token: Code=300  Line= 14  Col= 8    Name= ID           Spelling= 'u'
#08 identifier_list -> ID(u) identifier_list={u}
Token: Code=264  Line= 14  Col= 9    Name= COMMA        Spelling= ','
Token: Code=300  Line= 14  Col= 10   Name= ID           Spelling= 'v'
#09 identifier_list -> identifier_list , ID(v) identifier_list={u,v}
Token: Code=266  Line= 14  Col= 11   Name= COLON        Spelling= ':'
Token: Code=300  Line= 14  Col= 15   Name= ID           Spelling= 'real'
#14 standard_type -> ID(real)
Symbol(Type Symbol) id(real)
  type(Real)
    size(1) alignment(1)
#12 type -> standard_type
Token: Code=265  Line= 14  Col= 16   Name= SEMICOLON    Spelling= ';'
#11 variable_declarations -> variable_declarations VAR identifier_list  {u, v} : type SEMICOLON
Token: Code=286  Line= 15  Col= 11   Name= FUNCTION     Spelling= 'function'
#15 subprogram_declarations -> EMPTY
Token: Code=300  Line= 15  Col= 13   Name= ID           Spelling= 'f'
Token: Code=273  Line= 15  Col= 14   Name= LPAREN       Spelling= '('
Token: Code=300  Line= 15  Col= 15   Name= ID           Spelling= 'i'
#08 identifier_list -> ID(i) identifier_list={i}
Token: Code=266  Line= 15  Col= 16   Name= COLON        Spelling= ':'
Token: Code=300  Line= 15  Col= 23   Name= ID           Spelling= 'integer'
#14 standard_type -> ID(integer)
Symbol(Type Symbol) id(integer)
  type(Integer)
    size(1) alignment(1)
#12 type -> standard_type
#22 parameter_list -> identifier_list : type
Token: Code=265  Line= 15  Col= 24   Name= SEMICOLON    Spelling= ';'
Token: Code=300  Line= 15  Col= 25   Name= ID           Spelling= 'r'
#08 identifier_list -> ID(r) identifier_list={r}
Token: Code=266  Line= 15  Col= 26   Name= COLON        Spelling= ':'
Token: Code=300  Line= 15  Col= 30   Name= ID           Spelling= 'real'
#14 standard_type -> ID(real)
Symbol(Type Symbol) id(real)
  type(Real)
    size(1) alignment(1)
#12 type -> standard_type
#23 parameter_list -> parameter_list ; identifier_list : type
Token: Code=274  Line= 15  Col= 31   Name= RPAREN       Spelling= ')'
#21 subprogram_parameters -> ( parameter_list )
Token: Code=266  Line= 15  Col= 32   Name= COLON        Spelling= ':'
Token: Code=300  Line= 15  Col= 36   Name= ID           Spelling= 'real'
#14 standard_type -> ID(real)
Symbol(Type Symbol) id(real)
  type(Real)
    size(1) alignment(1)
Token: Code=265  Line= 15  Col= 37   Name= SEMICOLON    Spelling= ';'
#18 subprogram_head -> function ID(f) subprogram_parameters : standard_type ;
L00004

L00005

L00006

#10 variable_declarations -> EMPTY
Token: Code=281  Line= 16  Col= 8    Name= BEGIN        Spelling= 'begin'
Token: Code=300  Line= 17  Col= 6    Name= ID           Spelling= 'f'
Token: Code=262  Line= 17  Col= 8    Name= ASSIGN       Spelling= ':='
#34 variable -> ID(f)
Symbol(Function Symbol) id(f)
  type(Subprogram)
      Return Type
        type(Real)
          size(1) alignment(1)
      Parameter Types
        type(Integer)
          size(1) alignment(1)
        type(Real)
          size(1) alignment(1)
  lexicallevel(1) elabel(L00004) splabel(L00005) eplabel(L00006)
          lda       0         0         
Token: Code=300  Line= 17  Col= 9    Name= ID           Spelling= 'i'
Token: Code=258  Line= 17  Col= 10   Name= PLUS         Spelling= '+'
#63 factor -> ID(i)
Symbol(Variable Symbol) id(i)
  type(Integer)
    size(1) alignment(1)
  lexicallevel(2) address(5)
          lvi       0         5         
#56 term -> factor
#48 simple_expression -> term
#53 addop -> +
Token: Code=300  Line= 17  Col= 11   Name= ID           Spelling= 'r'
Token: Code=285  Line= 18  Col= 6    Name= END          Spelling= 'end'
#63 factor -> ID(r)
Symbol(Variable Symbol) id(r)
  type(Real)
    size(1) alignment(1)
  lexicallevel(2) address(6)
          lvr       0         6         
#56 term -> factor
#50 simple_expression -> simple_expression addop term
          lvi       0         5         
          flt                           
          lvr       0         6         
          adr                           
#40 expression -> simple_expression
#29 statement -> variable := expression
          lda       0         0         
          lvi       0         5         
          flt                           
          lvr       0         6         
          adr                           
          sti       r                   
#27 statement_list -> statement
          lda       0         0         
          lvi       0         5         
          flt                           
          lvr       0         6         
          adr                           
          sti       r                   
#26 optional_statements -> statement_list
          lda       0         0         
          lvi       0         5         
          flt                           
          lvr       0         6         
          adr                           
          sti       r                   
#24 compound_statement -> BEGIN optional_statements END
          lda       0         0         
          lvi       0         5         
          flt                           
          lvr       0         6         
          adr                           
          sti       r                   
#17 subprogram_declarations -> subprogram_head declarations compound_statement
          Symbol(Function Symbol) id(f)
            type(Subprogram)
                Return Type
                  type(Real)
                    size(1) alignment(1)
                Parameter Types
                  type(Integer)
                    size(1) alignment(1)
                  type(Real)
                    size(1) alignment(1)
            lexicallevel(1) elabel(L00004) splabel(L00005) eplabel(L00006)
prolog
L00004    ent       sp        L00005    
          ent       ep        L00006    
compound_statement
          lda       0         0         
          lvi       0         5         
          flt                           
          lvr       0         6         
          adr                           
          sti       r                   
          rtn       r                   

#define   L00005    6                   


#define   L00006    9                   

epilog
          rtn       r                   
#define   L00005    6                   
#define   L00006    9                   
Locality: lexical level 2

    Symbol(Variable Symbol) id(i)
      type(Integer)
        size(1) alignment(1)
      lexicallevel(2) address(5)
    Symbol(Variable Symbol) id(r)
      type(Real)
        size(1) alignment(1)
      lexicallevel(2) address(6)

Token: Code=265  Line= 18  Col= 10   Name= SEMICOLON    Spelling= ';'
#16 subprogram_declarations -> subprogram_declarations subprogram_declaration ;
Token: Code=281  Line= 19  Col= 6    Name= BEGIN        Spelling= 'begin'
#03 program_declarations -> declarations subprogram_declarations
Token: Code=300  Line= 20  Col= 4    Name= ID           Spelling= 'a'
Token: Code=262  Line= 20  Col= 6    Name= ASSIGN       Spelling= ':='
#34 variable -> ID(a)
Symbol(Variable Symbol) id(a)
  type(Integer)
    size(1) alignment(1)
  lexicallevel(1) address(5)
          lda       0         5         
Token: Code=301  Line= 20  Col= 7    Name= INTLIT       Spelling= '2'
#68 factor -> INTLIT(2)
          ldc       i         2         
#56 term -> factor
Token: Code=265  Line= 20  Col= 8    Name= SEMICOLON    Spelling= ';'
#48 simple_expression -> term
#40 expression -> simple_expression
#29 statement -> variable := expression
          lda       0         5         
          ldc       i         2         
          sti       i                   
#27 statement_list -> statement
          lda       0         5         
          ldc       i         2         
          sti       i                   
Token: Code=300  Line= 20  Col= 10   Name= ID           Spelling= 'b'
Token: Code=262  Line= 20  Col= 12   Name= ASSIGN       Spelling= ':='
#34 variable -> ID(b)
Symbol(Variable Symbol) id(b)
  type(Integer)
    size(1) alignment(1)
  lexicallevel(1) address(6)
          lda       0         6         
Token: Code=301  Line= 20  Col= 13   Name= INTLIT       Spelling= '3'
#68 factor -> INTLIT(3)
          ldc       i         3         
#56 term -> factor
Token: Code=265  Line= 20  Col= 14   Name= SEMICOLON    Spelling= ';'
#48 simple_expression -> term
#40 expression -> simple_expression
#29 statement -> variable := expression
          lda       0         6         
          ldc       i         3         
          sti       i                   
#28 statement_list -> statement_list SEMICOLON statement
          lda       0         5         
          ldc       i         2         
          sti       i                   
          lda       0         6         
          ldc       i         3         
          sti       i                   
Token: Code=300  Line= 21  Col= 4    Name= ID           Spelling= 'u'
Token: Code=262  Line= 21  Col= 6    Name= ASSIGN       Spelling= ':='
#34 variable -> ID(u)
Symbol(Variable Symbol) id(u)
  type(Real)
    size(1) alignment(1)
  lexicallevel(1) address(7)
          lda       0         7         
Token: Code=302  Line= 21  Col= 9    Name= REALIT       Spelling= '5.0'
#69 factor -> REALIT(5.0)
          ldc       r         5.0       
#56 term -> factor
Token: Code=265  Line= 21  Col= 10   Name= SEMICOLON    Spelling= ';'
#48 simple_expression -> term
#40 expression -> simple_expression
#29 statement -> variable := expression
          lda       0         7         
          ldc       r         5.0       
          sti       r                   
#28 statement_list -> statement_list SEMICOLON statement
          lda       0         5         
          ldc       i         2         
          sti       i                   
          lda       0         6         
          ldc       i         3         
          sti       i                   
          lda       0         7         
          ldc       r         5.0       
          sti       r                   
Token: Code=300  Line= 21  Col= 12   Name= ID           Spelling= 'v'
Token: Code=262  Line= 21  Col= 14   Name= ASSIGN       Spelling= ':='
#34 variable -> ID(v)
Symbol(Variable Symbol) id(v)
  type(Real)
    size(1) alignment(1)
  lexicallevel(1) address(8)
          lda       0         8         
Token: Code=302  Line= 21  Col= 17   Name= REALIT       Spelling= '7.0'
#69 factor -> REALIT(7.0)
          ldc       r         7.0       
#56 term -> factor
Token: Code=265  Line= 21  Col= 18   Name= SEMICOLON    Spelling= ';'
#48 simple_expression -> term
#40 expression -> simple_expression
#29 statement -> variable := expression
          lda       0         8         
          ldc       r         7.0       
          sti       r                   
#28 statement_list -> statement_list SEMICOLON statement
          lda       0         5         
          ldc       i         2         
          sti       i                   
          lda       0         6         
          ldc       i         3         
          sti       i                   
          lda       0         7         
          ldc       r         5.0       
          sti       r                   
          lda       0         8         
          ldc       r         7.0       
          sti       r                   
Token: Code=300  Line= 22  Col= 4    Name= ID           Spelling= 'u'
Token: Code=262  Line= 22  Col= 6    Name= ASSIGN       Spelling= ':='
#34 variable -> ID(u)
Symbol(Variable Symbol) id(u)
  type(Real)
    size(1) alignment(1)
  lexicallevel(1) address(7)
          lda       0         7         
Token: Code=300  Line= 22  Col= 7    Name= ID           Spelling= 'f'
Token: Code=273  Line= 22  Col= 8    Name= LPAREN       Spelling= '('
Token: Code=300  Line= 22  Col= 9    Name= ID           Spelling= 'a'
Token: Code=258  Line= 22  Col= 10   Name= PLUS         Spelling= '+'
#63 factor -> ID(a)
Symbol(Variable Symbol) id(a)
  type(Integer)
    size(1) alignment(1)
  lexicallevel(1) address(5)
          lvi       0         5         
#56 term -> factor
#48 simple_expression -> term
#53 addop -> +
Token: Code=300  Line= 22  Col= 11   Name= ID           Spelling= 'b'
Token: Code=260  Line= 22  Col= 12   Name= STAR         Spelling= '*'
#63 factor -> ID(b)
Symbol(Variable Symbol) id(b)
  type(Integer)
    size(1) alignment(1)
  lexicallevel(1) address(6)
          lvi       0         6         
#56 term -> factor
#58 mulop -> *
Token: Code=301  Line= 22  Col= 13   Name= INTLIT       Spelling= '6'
#68 factor -> INTLIT(6)
          ldc       i         6         
#57 term -> term mulop factor
          lvi       0         6         
          ldc       i         6         
          mpi                           
Token: Code=264  Line= 22  Col= 14   Name= COMMA        Spelling= ','
#50 simple_expression -> simple_expression addop term
          lvi       0         5         
          lvi       0         6         
          ldc       i         6         
          mpi                           
          adi                           
#40 expression -> simple_expression
#38 expression_list -> expression
Token: Code=300  Line= 22  Col= 15   Name= ID           Spelling= 'u'
Token: Code=258  Line= 22  Col= 16   Name= PLUS         Spelling= '+'
#63 factor -> ID(u)
Symbol(Variable Symbol) id(u)
  type(Real)
    size(1) alignment(1)
  lexicallevel(1) address(7)
          lvr       0         7         
#56 term -> factor
#48 simple_expression -> term
#53 addop -> +
Token: Code=300  Line= 22  Col= 17   Name= ID           Spelling= 'v'
Token: Code=260  Line= 22  Col= 18   Name= STAR         Spelling= '*'
#63 factor -> ID(v)
Symbol(Variable Symbol) id(v)
  type(Real)
    size(1) alignment(1)
  lexicallevel(1) address(8)
          lvr       0         8         
#56 term -> factor
#58 mulop -> *
Token: Code=302  Line= 22  Col= 21   Name= REALIT       Spelling= '9.8'
#69 factor -> REALIT(9.8)
          ldc       r         9.8       
#57 term -> term mulop factor
          lvr       0         8         
          ldc       r         9.8       
          mpr                           
Token: Code=274  Line= 22  Col= 22   Name= RPAREN       Spelling= ')'
#50 simple_expression -> simple_expression addop term
          lvr       0         7         
          lvr       0         8         
          ldc       r         9.8       
          mpr                           
          adr                           
#40 expression -> simple_expression
#39 expression_list -> expression_list , expression
#65 factor -> ID(f) LPAREN expression_list RPAREN
          mst       0                   
          lvi       0         5         
          lvi       0         6         
          ldc       i         6         
          mpi                           
          adi                           
          lvr       0         7         
          lvr       0         8         
          ldc       r         9.8       
          mpr                           
          adr                           
          cup       2         L00004    
#56 term -> factor
Token: Code=285  Line= 23  Col= 4    Name= END          Spelling= 'end'
#48 simple_expression -> term
#40 expression -> simple_expression
#29 statement -> variable := expression
          lda       0         7         
          mst       0                   
          lvi       0         5         
          lvi       0         6         
          ldc       i         6         
          mpi                           
          adi                           
          lvr       0         7         
          lvr       0         8         
          ldc       r         9.8       
          mpr                           
          adr                           
          cup       2         L00004    
          sti       r                   
#28 statement_list -> statement_list SEMICOLON statement
          lda       0         5         
          ldc       i         2         
          sti       i                   
          lda       0         6         
          ldc       i         3         
          sti       i                   
          lda       0         7         
          ldc       r         5.0       
          sti       r                   
          lda       0         8         
          ldc       r         7.0       
          sti       r                   
          lda       0         7         
          mst       0                   
          lvi       0         5         
          lvi       0         6         
          ldc       i         6         
          mpi                           
          adi                           
          lvr       0         7         
          lvr       0         8         
          ldc       r         9.8       
          mpr                           
          adr                           
          cup       2         L00004    
          sti       r                   
#26 optional_statements -> statement_list
          lda       0         5         
          ldc       i         2         
          sti       i                   
          lda       0         6         
          ldc       i         3         
          sti       i                   
          lda       0         7         
          ldc       r         5.0       
          sti       r                   
          lda       0         8         
          ldc       r         7.0       
          sti       r                   
          lda       0         7         
          mst       0                   
          lvi       0         5         
          lvi       0         6         
          ldc       i         6         
          mpi                           
          adi                           
          lvr       0         7         
          lvr       0         8         
          ldc       r         9.8       
          mpr                           
          adr                           
          cup       2         L00004    
          sti       r                   
#24 compound_statement -> BEGIN optional_statements END
          lda       0         5         
          ldc       i         2         
          sti       i                   
          lda       0         6         
          ldc       i         3         
          sti       i                   
          lda       0         7         
          ldc       r         5.0       
          sti       r                   
          lda       0         8         
          ldc       r         7.0       
          sti       r                   
          lda       0         7         
          mst       0                   
          lvi       0         5         
          lvi       0         6         
          ldc       i         6         
          mpi                           
          adi                           
          lvr       0         7         
          lvr       0         8         
          ldc       r         9.8       
          mpr                           
          adr                           
          cup       2         L00004    
          sti       r                   
Token: Code=263  Line= 23  Col= 13   Name= PERIOD       Spelling= '.'
#04 program_body -> compound_statement PERIOD
#01 program -> program_head program_declarations program_body
          Symbol(Procedure Symbol) id(p10_01)
            type(Subprogram)
                Return Type
                  type(Void)
                    size(0) alignment(0)
                Parameter Types
            lexicallevel(0) elabel(L00001) splabel(L00002) eplabel(L00003)
prolog
L00001    ent       sp        L00002    
          ent       ep        L00003    
compound_statement
          lda       0         5         
          ldc       i         2         
          sti       i                   
          lda       0         6         
          ldc       i         3         
          sti       i                   
          lda       0         7         
          ldc       r         5.0       
          sti       r                   
          lda       0         8         
          ldc       r         7.0       
          sti       r                   
          lda       0         7         
          mst       0                   
          lvi       0         5         
          lvi       0         6         
          ldc       i         6         
          mpi                           
          adi                           
          lvr       0         7         
          lvr       0         8         
          ldc       r         9.8       
          mpr                           
          adr                           
          cup       2         L00004    
          sti       r                   
          rtn       p                   

#define   L00002    8                   


#define   L00003    18                  

epilog
          rtn       p                   
#define   L00002    8                   
#define   L00003    18                  
program epilog
          mst       0                   
          cup       0         L00001    
          stp                           
Locality: lexical level 1

  Symbol(Variable Symbol) id(a)
    type(Integer)
      size(1) alignment(1)
    lexicallevel(1) address(5)
  Symbol(Variable Symbol) id(b)
    type(Integer)
      size(1) alignment(1)
    lexicallevel(1) address(6)
  Symbol(Function Symbol) id(f)
    type(Subprogram)
        Return Type
          type(Real)
            size(1) alignment(1)
        Parameter Types
          type(Integer)
            size(1) alignment(1)
          type(Real)
            size(1) alignment(1)
    lexicallevel(1) elabel(L00004) splabel(L00005) eplabel(L00006)
  Symbol(Variable Symbol) id(u)
    type(Real)
      size(1) alignment(1)
    lexicallevel(1) address(7)
  Symbol(Variable Symbol) id(v)
    type(Real)
      size(1) alignment(1)
    lexicallevel(1) address(8)

Locality: lexical level 0

Symbol(Standard Function Symbol) id(abs)
  type(Void)
    size(0) alignment(0)
  cspid(abs)
Symbol(Type Symbol) id(boolean)
  type(Boolean)
    size(1) alignment(1)
Symbol(Type Symbol) id(char)
  type(Character)
    size(1) alignment(1)
Symbol(Standard Function Symbol) id(chr)
  type(Void)
    size(0) alignment(0)
  cspid(chr)
Symbol(Standard Function Symbol) id(exp)
  type(Void)
    size(0) alignment(0)
  cspid(exp)
Symbol(Constant Symbol) id(false)
  type(Boolean)
    size(1) alignment(1)
  Constant value(0)
    type(Boolean)
      size(1) alignment(1)
Symbol(Type Symbol) id(integer)
  type(Integer)
    size(1) alignment(1)
Symbol(Standard Function Symbol) id(ln)
  type(Void)
    size(0) alignment(0)
  cspid(ln)
Symbol(Standard Function Symbol) id(ord)
  type(Void)
    size(0) alignment(0)
  cspid(ord)
Symbol(Procedure Symbol) id(p10_01)
  type(Subprogram)
      Return Type
        type(Void)
          size(0) alignment(0)
      Parameter Types
  lexicallevel(0) elabel(L00001) splabel(L00002) eplabel(L00003)
Symbol(Standard Function Symbol) id(pred)
  type(Void)
    size(0) alignment(0)
  cspid(dec)
Symbol(Standard Procedure Symbol) id(readchar)
  type(Void)
    size(0) alignment(0)
  cspid(rdc)
Symbol(Standard Procedure Symbol) id(readinteger)
  type(Void)
    size(0) alignment(0)
  cspid(rdi)
Symbol(Standard Procedure Symbol) id(readln)
  type(Void)
    size(0) alignment(0)
  cspid(rln)
Symbol(Standard Procedure Symbol) id(readreal)
  type(Void)
    size(0) alignment(0)
  cspid(rdr)
Symbol(Standard Procedure Symbol) id(readstring)
  type(Void)
    size(0) alignment(0)
  cspid(rds)
Symbol(Type Symbol) id(real)
  type(Real)
    size(1) alignment(1)
Symbol(Standard Function Symbol) id(round)
  type(Void)
    size(0) alignment(0)
  cspid(rnd)
Symbol(Standard Function Symbol) id(sqrt)
  type(Void)
    size(0) alignment(0)
  cspid(sqt)
Symbol(Standard Function Symbol) id(succ)
  type(Void)
    size(0) alignment(0)
  cspid(inc)
Symbol(Constant Symbol) id(true)
  type(Boolean)
    size(1) alignment(1)
  Constant value(1)
    type(Boolean)
      size(1) alignment(1)
Symbol(Standard Function Symbol) id(trunc)
  type(Void)
    size(0) alignment(0)
  cspid(trc)
Symbol(Standard Procedure Symbol) id(writeboolean)
  type(Void)
    size(0) alignment(0)
  cspid(wrb)
Symbol(Standard Procedure Symbol) id(writechar)
  type(Void)
    size(0) alignment(0)
  cspid(wrc)
Symbol(Standard Procedure Symbol) id(writeexponential)
  type(Void)
    size(0) alignment(0)
  cspid(wre)
Symbol(Standard Procedure Symbol) id(writefixed)
  type(Void)
    size(0) alignment(0)
  cspid(wrf)
Symbol(Standard Procedure Symbol) id(writeinteger)
  type(Void)
    size(0) alignment(0)
  cspid(wri)
Symbol(Standard Procedure Symbol) id(writeln)
  type(Void)
    size(0) alignment(0)
  cspid(wln)
Symbol(Standard Procedure Symbol) id(writestring)
  type(Void)
    size(0) alignment(0)
  cspid(wrs)

