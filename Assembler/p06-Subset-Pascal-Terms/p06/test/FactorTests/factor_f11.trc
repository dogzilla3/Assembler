
Token: Code=293  Line= 1   Col= 8    Name= PROGRAM      Spelling= 'program'
Token: Code=300  Line= 1   Col= 12   Name= ID           Spelling= 'f11'
Token: Code=265  Line= 1   Col= 13   Name= SEMICOLON    Spelling= ';'
#05 program_parameters -> EMPTY
#02 program_head -> program ID(f11) program_parameters SEMICOLON
#10 declarations -> EMPTY
Token: Code=297  Line= 2   Col= 5    Name= VAR          Spelling= 'var'
Token: Code=300  Line= 2   Col= 7    Name= ID           Spelling= 'r'
#08 identifier_list -> ID(r) identifier_list={r}
Token: Code=266  Line= 2   Col= 8    Name= COLON        Spelling= ':'
Token: Code=300  Line= 2   Col= 12   Name= ID           Spelling= 'real'
#14 standard_type -> ID(real)
Symbol(Type Symbol) id(real)
  type(Real)
    size(1) alignment(1)
#12 type -> standard_type
Token: Code=265  Line= 2   Col= 13   Name= SEMICOLON    Spelling= ';'
#11 declarations -> declarations VAR identifier_list  {r} : type SEMICOLON
Token: Code=286  Line= 3   Col= 10   Name= FUNCTION     Spelling= 'function'
#15 subprogram_declarations -> EMPTY
Token: Code=300  Line= 3   Col= 12   Name= ID           Spelling= 'f'
Token: Code=273  Line= 3   Col= 13   Name= LPAREN       Spelling= '('
Token: Code=300  Line= 3   Col= 14   Name= ID           Spelling= 'a'
#08 identifier_list -> ID(a) identifier_list={a}
Token: Code=264  Line= 3   Col= 15   Name= COMMA        Spelling= ','
Token: Code=300  Line= 3   Col= 16   Name= ID           Spelling= 'b'
#09 identifier_list -> identifier_list , ID(b) identifier_list={a,b}
Token: Code=266  Line= 3   Col= 17   Name= COLON        Spelling= ':'
Token: Code=300  Line= 3   Col= 24   Name= ID           Spelling= 'integer'
#14 standard_type -> ID(integer)
Symbol(Type Symbol) id(integer)
  type(Integer)
    size(1) alignment(1)
#12 type -> standard_type
#22 parameter_list -> identifier_list : type
Token: Code=274  Line= 3   Col= 25   Name= RPAREN       Spelling= ')'
#21 subprogram_parameters -> ( parameter_list )
Token: Code=266  Line= 3   Col= 26   Name= COLON        Spelling= ':'
Token: Code=300  Line= 3   Col= 30   Name= ID           Spelling= 'real'
#14 standard_type -> ID(real)
Symbol(Type Symbol) id(real)
  type(Real)
    size(1) alignment(1)
Token: Code=265  Line= 3   Col= 31   Name= SEMICOLON    Spelling= ';'
#18 subprogram_head -> function ID(f) subprogram_parameters : standard_type ;
#10 declarations -> EMPTY
Token: Code=281  Line= 4   Col= 7    Name= BEGIN        Spelling= 'begin'
Token: Code=285  Line= 4   Col= 14   Name= END          Spelling= 'end'
#25 optional_statements -> EMPTY
#24 compound_statement -> BEGIN optional_statements END
#17 subprogram_declarations -> subprogram_head declarations compound_statement
Locality: lexical level 2

    Symbol(Variable Symbol) id(a)
      type(Integer)
        size(1) alignment(1)
      lexicallevel(2) address(5)
    Symbol(Variable Symbol) id(b)
      type(Integer)
        size(1) alignment(1)
      lexicallevel(2) address(6)

Token: Code=265  Line= 4   Col= 18   Name= SEMICOLON    Spelling= ';'
#16 subprogram_declarations -> subprogram_declarations subprogram_declaration ;
Token: Code=281  Line= 5   Col= 6    Name= BEGIN        Spelling= 'begin'
#03 program_declarations -> declarations subprogram_declarations
Token: Code=300  Line= 6   Col= 3    Name= ID           Spelling= 'r'
Token: Code=262  Line= 6   Col= 5    Name= ASSIGN       Spelling= ':='
#34 variable -> ID(r)
Token: Code=300  Line= 6   Col= 6    Name= ID           Spelling= 'f'
Token: Code=273  Line= 6   Col= 7    Name= LPAREN       Spelling= '('
Token: Code=301  Line= 6   Col= 8    Name= INTLIT       Spelling= '1'
#68 factor -> INTLIT(1)
          ldc       i         1         
#56 term -> factor
Token: Code=264  Line= 6   Col= 9    Name= COMMA        Spelling= ','
#48 simple_expression -> term
#40 expression -> simple_expression
#38 expression_list -> expression
Token: Code=301  Line= 6   Col= 10   Name= INTLIT       Spelling= '2'
#68 factor -> INTLIT(2)
          ldc       i         2         
#56 term -> factor
Token: Code=274  Line= 6   Col= 11   Name= RPAREN       Spelling= ')'
#48 simple_expression -> term
#40 expression -> simple_expression
#39 expression_list -> expression_list , expression
#65 factor -> ID(f) LPAREN expression_list RPAREN
#56 term -> factor
Token: Code=285  Line= 7   Col= 4    Name= END          Spelling= 'end'
#48 simple_expression -> term
#40 expression -> simple_expression
#29 statement -> variable := expression
#27 statement_list -> statement
#26 optional_statements -> statement_list
#24 compound_statement -> BEGIN optional_statements END
Token: Code=263  Line= 7   Col= 10   Name= PERIOD       Spelling= '.'
#04 program_body -> compound_statement PERIOD
#01 program -> program_head program_declarations program_body
Locality: lexical level 1

  Symbol(Function Symbol) id(f)
    type(Subprogram)
        Return Type
          type(Real)
            size(1) alignment(1)
        Parameter Types
          type(Integer)
            size(1) alignment(1)
          type(Integer)
            size(1) alignment(1)
    lexicallevel(1) elabel(L00004) splabel(L00005) eplabel(L00006)
  Symbol(Variable Symbol) id(r)
    type(Real)
      size(1) alignment(1)
    lexicallevel(1) address(5)

Locality: lexical level 0

Symbol(Standard Function Symbol) id(abs)
  type(Void)
    size(0) alignment(0)
  cspid(abs)
Symbol(Type Symbol) id(boolean)
  type(Boolean)
    size(1) alignment(1)
Symbol(Type Symbol) id(char)
  type(Character)
    size(1) alignment(1)
Symbol(Standard Function Symbol) id(chr)
  type(Void)
    size(0) alignment(0)
  cspid(chr)
Symbol(Program Symbol) id(f11)
  type(Void)
    size(0) alignment(0)
  lexicallevel(0) elabel(L00001) splabel(L00002) eplabel(L00003)
Symbol(Constant Symbol) id(false)
  type(Boolean)
    size(1) alignment(1)
  Constant value(0)
    type(Boolean)
      size(1) alignment(1)
Symbol(Type Symbol) id(integer)
  type(Integer)
    size(1) alignment(1)
Symbol(Standard Function Symbol) id(ord)
  type(Void)
    size(0) alignment(0)
  cspid(ord)
Symbol(Standard Function Symbol) id(pred)
  type(Void)
    size(0) alignment(0)
  cspid(dec)
Symbol(Standard Procedure Symbol) id(readchar)
  type(Void)
    size(0) alignment(0)
  cspid(rdc)
Symbol(Standard Procedure Symbol) id(readinteger)
  type(Void)
    size(0) alignment(0)
  cspid(rdi)
Symbol(Standard Procedure Symbol) id(readln)
  type(Void)
    size(0) alignment(0)
  cspid(rln)
Symbol(Standard Procedure Symbol) id(readreal)
  type(Void)
    size(0) alignment(0)
  cspid(rdr)
Symbol(Standard Procedure Symbol) id(readstring)
  type(Void)
    size(0) alignment(0)
  cspid(rds)
Symbol(Type Symbol) id(real)
  type(Real)
    size(1) alignment(1)
Symbol(Standard Function Symbol) id(round)
  type(Void)
    size(0) alignment(0)
  cspid(rnd)
Symbol(Standard Function Symbol) id(sqrt)
  type(Void)
    size(0) alignment(0)
  cspid(sqt)
Symbol(Standard Function Symbol) id(succ)
  type(Void)
    size(0) alignment(0)
  cspid(inc)
Symbol(Constant Symbol) id(true)
  type(Boolean)
    size(1) alignment(1)
  Constant value(1)
    type(Boolean)
      size(1) alignment(1)
Symbol(Standard Function Symbol) id(trunc)
  type(Void)
    size(0) alignment(0)
  cspid(trc)
Symbol(Standard Procedure Symbol) id(writeboolean)
  type(Void)
    size(0) alignment(0)
  cspid(wrb)
Symbol(Standard Procedure Symbol) id(writechar)
  type(Void)
    size(0) alignment(0)
  cspid(wrc)
Symbol(Standard Procedure Symbol) id(writeexponential)
  type(Void)
    size(0) alignment(0)
  cspid(wre)
Symbol(Standard Procedure Symbol) id(writefixed)
  type(Void)
    size(0) alignment(0)
  cspid(wrf)
Symbol(Standard Procedure Symbol) id(writeinteger)
  type(Void)
    size(0) alignment(0)
  cspid(wri)
Symbol(Standard Procedure Symbol) id(writeln)
  type(Void)
    size(0) alignment(0)
  cspid(wln)
Symbol(Standard Procedure Symbol) id(writestring)
  type(Void)
    size(0) alignment(0)
  cspid(wrs)
