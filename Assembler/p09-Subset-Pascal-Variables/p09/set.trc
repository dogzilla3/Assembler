
Token: Code=293  Line= 1   Col= 8    Name= PROGRAM      Spelling= 'program'
Token: Code=300  Line= 1   Col= 12   Name= ID           Spelling= 'set'
Token: Code=265  Line= 1   Col= 38   Name= SEMICOLON    Spelling= ';'
#05 program_parameters -> EMPTY
#02 program_head -> program ID(set) program_parameters SEMICOLON
#10 declarations -> EMPTY
Token: Code=297  Line= 2   Col= 6    Name= VAR          Spelling= 'var'
Token: Code=300  Line= 2   Col= 8    Name= ID           Spelling= 'a'
#08 identifier_list -> ID(a) identifier_list={a}
Token: Code=264  Line= 2   Col= 9    Name= COMMA        Spelling= ','
Token: Code=300  Line= 2   Col= 10   Name= ID           Spelling= 'b'
#09 identifier_list -> identifier_list , ID(b) identifier_list={a,b}
Token: Code=264  Line= 2   Col= 11   Name= COMMA        Spelling= ','
Token: Code=300  Line= 2   Col= 12   Name= ID           Spelling= 'c'
#09 identifier_list -> identifier_list , ID(c) identifier_list={a,b,c}
Token: Code=266  Line= 2   Col= 13   Name= COLON        Spelling= ':'
Token: Code=300  Line= 2   Col= 20   Name= ID           Spelling= 'integer'
#14 standard_type -> ID(integer)
Symbol(Type Symbol) id(integer)
  type(Integer)
    size(1) alignment(1)
#12 type -> standard_type
Token: Code=265  Line= 2   Col= 21   Name= SEMICOLON    Spelling= ';'
#11 declarations -> declarations VAR identifier_list  {a, b, c} : type SEMICOLON
Token: Code=297  Line= 3   Col= 6    Name= VAR          Spelling= 'var'
Token: Code=300  Line= 3   Col= 8    Name= ID           Spelling= 'r'
#08 identifier_list -> ID(r) identifier_list={r}
Token: Code=264  Line= 3   Col= 9    Name= COMMA        Spelling= ','
Token: Code=300  Line= 3   Col= 10   Name= ID           Spelling= 's'
#09 identifier_list -> identifier_list , ID(s) identifier_list={r,s}
Token: Code=264  Line= 3   Col= 11   Name= COMMA        Spelling= ','
Token: Code=300  Line= 3   Col= 12   Name= ID           Spelling= 't'
#09 identifier_list -> identifier_list , ID(t) identifier_list={r,s,t}
Token: Code=266  Line= 3   Col= 13   Name= COLON        Spelling= ':'
Token: Code=300  Line= 3   Col= 17   Name= ID           Spelling= 'real'
#14 standard_type -> ID(real)
Symbol(Type Symbol) id(real)
  type(Real)
    size(1) alignment(1)
#12 type -> standard_type
Token: Code=265  Line= 3   Col= 18   Name= SEMICOLON    Spelling= ';'
#11 declarations -> declarations VAR identifier_list  {r, s, t} : type SEMICOLON
Token: Code=281  Line= 4   Col= 6    Name= BEGIN        Spelling= 'begin'
#15 subprogram_declarations -> EMPTY
#03 program_declarations -> declarations subprogram_declarations
Token: Code=300  Line= 5   Col= 4    Name= ID           Spelling= 'a'
Token: Code=262  Line= 5   Col= 6    Name= ASSIGN       Spelling= ':='
#34 variable -> ID(a)
Token: Code=301  Line= 5   Col= 7    Name= INTLIT       Spelling= '1'
#68 factor -> INTLIT(1)
          ldc       i         1         
#56 term -> factor
Token: Code=265  Line= 5   Col= 8    Name= SEMICOLON    Spelling= ';'
#48 simple_expression -> term
#40 expression -> simple_expression
#29 statement -> variable := expression
#27 statement_list -> statement
Token: Code=300  Line= 5   Col= 9    Name= ID           Spelling= 'b'
Token: Code=262  Line= 5   Col= 11   Name= ASSIGN       Spelling= ':='
#34 variable -> ID(b)
Token: Code=301  Line= 5   Col= 12   Name= INTLIT       Spelling= '2'
#68 factor -> INTLIT(2)
          ldc       i         2         
#56 term -> factor
Token: Code=265  Line= 5   Col= 13   Name= SEMICOLON    Spelling= ';'
#48 simple_expression -> term
#40 expression -> simple_expression
#29 statement -> variable := expression
#28 statement_list -> statement_list SEMICOLON statement
Token: Code=300  Line= 5   Col= 14   Name= ID           Spelling= 'c'
Token: Code=262  Line= 5   Col= 16   Name= ASSIGN       Spelling= ':='
#34 variable -> ID(c)
Token: Code=300  Line= 5   Col= 17   Name= ID           Spelling= 'a'
Token: Code=259  Line= 5   Col= 18   Name= MINUS        Spelling= '-'
#63 factor -> ID(a)
Symbol(Variable Symbol) id(a)
  type(Integer)
    size(1) alignment(1)
  lexicallevel(1) address(5)
          lvi       0         05        
#56 term -> factor
#48 simple_expression -> term
#54 addop -> -
Token: Code=300  Line= 5   Col= 19   Name= ID           Spelling= 'b'
Token: Code=265  Line= 5   Col= 20   Name= SEMICOLON    Spelling= ';'
#63 factor -> ID(b)
Symbol(Variable Symbol) id(b)
  type(Integer)
    size(1) alignment(1)
  lexicallevel(1) address(6)
          lvi       0         06        
#56 term -> factor
#50 simple_expression -> simple_expression addop term
          lvi       0         05        
          lvi       0         06        
          sbi                           
#40 expression -> simple_expression
#29 statement -> variable := expression
#28 statement_list -> statement_list SEMICOLON statement
Token: Code=300  Line= 5   Col= 21   Name= ID           Spelling= 'c'
Token: Code=262  Line= 5   Col= 23   Name= ASSIGN       Spelling= ':='
#34 variable -> ID(c)
Token: Code=300  Line= 5   Col= 24   Name= ID           Spelling= 'a'
Token: Code=258  Line= 5   Col= 25   Name= PLUS         Spelling= '+'
#63 factor -> ID(a)
Symbol(Variable Symbol) id(a)
  type(Integer)
    size(1) alignment(1)
  lexicallevel(1) address(5)
          lvi       0         05        
#56 term -> factor
#48 simple_expression -> term
#53 addop -> +
Token: Code=300  Line= 5   Col= 26   Name= ID           Spelling= 'b'
Token: Code=265  Line= 5   Col= 27   Name= SEMICOLON    Spelling= ';'
#63 factor -> ID(b)
Symbol(Variable Symbol) id(b)
  type(Integer)
    size(1) alignment(1)
  lexicallevel(1) address(6)
          lvi       0         06        
#56 term -> factor
#50 simple_expression -> simple_expression addop term
          lvi       0         05        
          lvi       0         06        
          adi                           
#40 expression -> simple_expression
#29 statement -> variable := expression
#28 statement_list -> statement_list SEMICOLON statement
Token: Code=300  Line= 6   Col= 4    Name= ID           Spelling= 'r'
Token: Code=262  Line= 6   Col= 6    Name= ASSIGN       Spelling= ':='
#34 variable -> ID(r)
Token: Code=302  Line= 6   Col= 9    Name= REALIT       Spelling= '1.0'
#69 factor -> REALIT(1.0)
          ldc       r         1.0       
#56 term -> factor
Token: Code=265  Line= 6   Col= 10   Name= SEMICOLON    Spelling= ';'
#48 simple_expression -> term
#40 expression -> simple_expression
#29 statement -> variable := expression
#28 statement_list -> statement_list SEMICOLON statement
Token: Code=300  Line= 6   Col= 11   Name= ID           Spelling= 's'
Token: Code=262  Line= 6   Col= 13   Name= ASSIGN       Spelling= ':='
#34 variable -> ID(s)
Token: Code=302  Line= 6   Col= 16   Name= REALIT       Spelling= '2.0'
#69 factor -> REALIT(2.0)
          ldc       r         2.0       
#56 term -> factor
Token: Code=265  Line= 6   Col= 17   Name= SEMICOLON    Spelling= ';'
#48 simple_expression -> term
#40 expression -> simple_expression
#29 statement -> variable := expression
#28 statement_list -> statement_list SEMICOLON statement
Token: Code=300  Line= 6   Col= 18   Name= ID           Spelling= 't'
Token: Code=262  Line= 6   Col= 20   Name= ASSIGN       Spelling= ':='
#34 variable -> ID(t)
Token: Code=300  Line= 6   Col= 21   Name= ID           Spelling= 's'
Token: Code=258  Line= 6   Col= 22   Name= PLUS         Spelling= '+'
#63 factor -> ID(s)
Symbol(Variable Symbol) id(s)
  type(Real)
    size(1) alignment(1)
  lexicallevel(1) address(9)
          lvr       0         09        
#56 term -> factor
#48 simple_expression -> term
#53 addop -> +
Token: Code=300  Line= 6   Col= 23   Name= ID           Spelling= 'r'
Token: Code=265  Line= 6   Col= 24   Name= SEMICOLON    Spelling= ';'
#63 factor -> ID(r)
Symbol(Variable Symbol) id(r)
  type(Real)
    size(1) alignment(1)
  lexicallevel(1) address(8)
          lvr       0         08        
#56 term -> factor
#50 simple_expression -> simple_expression addop term
          lvr       0         09        
          lvr       0         08        
          adr                           
#40 expression -> simple_expression
#29 statement -> variable := expression
#28 statement_list -> statement_list SEMICOLON statement
Token: Code=300  Line= 6   Col= 25   Name= ID           Spelling= 't'
Token: Code=262  Line= 6   Col= 27   Name= ASSIGN       Spelling= ':='
#34 variable -> ID(t)
Token: Code=300  Line= 6   Col= 28   Name= ID           Spelling= 's'
Token: Code=259  Line= 6   Col= 29   Name= MINUS        Spelling= '-'
#63 factor -> ID(s)
Symbol(Variable Symbol) id(s)
  type(Real)
    size(1) alignment(1)
  lexicallevel(1) address(9)
          lvr       0         09        
#56 term -> factor
#48 simple_expression -> term
#54 addop -> -
Token: Code=300  Line= 6   Col= 30   Name= ID           Spelling= 't'
Token: Code=285  Line= 7   Col= 4    Name= END          Spelling= 'end'
#63 factor -> ID(t)
Symbol(Variable Symbol) id(t)
  type(Real)
    size(1) alignment(1)
  lexicallevel(1) address(10)
          lvr       0         010       
#56 term -> factor
#50 simple_expression -> simple_expression addop term
          lvr       0         09        
          lvr       0         010       
          sbr                           
#40 expression -> simple_expression
#29 statement -> variable := expression
#28 statement_list -> statement_list SEMICOLON statement
#26 optional_statements -> statement_list
#24 compound_statement -> BEGIN optional_statements END
Token: Code=263  Line= 7   Col= 5    Name= PERIOD       Spelling= '.'
#04 program_body -> compound_statement PERIOD
#01 program -> program_head program_declarations program_body
Locality: lexical level 1

  Symbol(Variable Symbol) id(a)
    type(Integer)
      size(1) alignment(1)
    lexicallevel(1) address(5)
  Symbol(Variable Symbol) id(b)
    type(Integer)
      size(1) alignment(1)
    lexicallevel(1) address(6)
  Symbol(Variable Symbol) id(c)
    type(Integer)
      size(1) alignment(1)
    lexicallevel(1) address(7)
  Symbol(Variable Symbol) id(r)
    type(Real)
      size(1) alignment(1)
    lexicallevel(1) address(8)
  Symbol(Variable Symbol) id(s)
    type(Real)
      size(1) alignment(1)
    lexicallevel(1) address(9)
  Symbol(Variable Symbol) id(t)
    type(Real)
      size(1) alignment(1)
    lexicallevel(1) address(10)

Locality: lexical level 0

Symbol(Standard Function Symbol) id(abs)
  type(Void)
    size(0) alignment(0)
  cspid(abs)
Symbol(Type Symbol) id(boolean)
  type(Boolean)
    size(1) alignment(1)
Symbol(Type Symbol) id(char)
  type(Character)
    size(1) alignment(1)
Symbol(Standard Function Symbol) id(chr)
  type(Void)
    size(0) alignment(0)
  cspid(chr)
Symbol(Constant Symbol) id(false)
  type(Boolean)
    size(1) alignment(1)
  Constant value(0)
    type(Boolean)
      size(1) alignment(1)
Symbol(Type Symbol) id(integer)
  type(Integer)
    size(1) alignment(1)
Symbol(Standard Function Symbol) id(ord)
  type(Void)
    size(0) alignment(0)
  cspid(ord)
Symbol(Standard Function Symbol) id(pred)
  type(Void)
    size(0) alignment(0)
  cspid(dec)
Symbol(Standard Procedure Symbol) id(readchar)
  type(Void)
    size(0) alignment(0)
  cspid(rdc)
Symbol(Standard Procedure Symbol) id(readinteger)
  type(Void)
    size(0) alignment(0)
  cspid(rdi)
Symbol(Standard Procedure Symbol) id(readln)
  type(Void)
    size(0) alignment(0)
  cspid(rln)
Symbol(Standard Procedure Symbol) id(readreal)
  type(Void)
    size(0) alignment(0)
  cspid(rdr)
Symbol(Standard Procedure Symbol) id(readstring)
  type(Void)
    size(0) alignment(0)
  cspid(rds)
Symbol(Type Symbol) id(real)
  type(Real)
    size(1) alignment(1)
Symbol(Standard Function Symbol) id(round)
  type(Void)
    size(0) alignment(0)
  cspid(rnd)
Symbol(Program Symbol) id(set)
  type(Void)
    size(0) alignment(0)
  lexicallevel(0) elabel(L00001) splabel(L00002) eplabel(L00003)
Symbol(Standard Function Symbol) id(sqrt)
  type(Void)
    size(0) alignment(0)
  cspid(sqt)
Symbol(Standard Function Symbol) id(succ)
  type(Void)
    size(0) alignment(0)
  cspid(inc)
Symbol(Constant Symbol) id(true)
  type(Boolean)
    size(1) alignment(1)
  Constant value(1)
    type(Boolean)
      size(1) alignment(1)
Symbol(Standard Function Symbol) id(trunc)
  type(Void)
    size(0) alignment(0)
  cspid(trc)
Symbol(Standard Procedure Symbol) id(writeboolean)
  type(Void)
    size(0) alignment(0)
  cspid(wrb)
Symbol(Standard Procedure Symbol) id(writechar)
  type(Void)
    size(0) alignment(0)
  cspid(wrc)
Symbol(Standard Procedure Symbol) id(writeexponential)
  type(Void)
    size(0) alignment(0)
  cspid(wre)
Symbol(Standard Procedure Symbol) id(writefixed)
  type(Void)
    size(0) alignment(0)
  cspid(wrf)
Symbol(Standard Procedure Symbol) id(writeinteger)
  type(Void)
    size(0) alignment(0)
  cspid(wri)
Symbol(Standard Procedure Symbol) id(writeln)
  type(Void)
    size(0) alignment(0)
  cspid(wln)
Symbol(Standard Procedure Symbol) id(writestring)
  type(Void)
    size(0) alignment(0)
  cspid(wrs)
